.TH "Mapper" 3 "Tue Jan 3 2017" "Version 3.6" "Fat-Free Framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Mapper \- \fBSQL\fP data mapper\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBCursor\fP\&.
.PP
Inherited by \fBSession\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBdbtype\fP ()"
.br
.ti -1c
.RI "\fBtable\fP ()"
.br
.ti -1c
.RI "\fBexists\fP ($key)"
.br
.ti -1c
.RI "\fBchanged\fP ($key=NULL)"
.br
.ti -1c
.RI "\fBset\fP ($key, $val)"
.br
.ti -1c
.RI "& \fBget\fP ($key)"
.br
.ti -1c
.RI "\fBclear\fP ($key)"
.br
.ti -1c
.RI "\fBtype\fP ($\fBpdo\fP)"
.br
.ti -1c
.RI "\fBcast\fP ($obj=NULL)"
.br
.ti -1c
.RI "\fBselect\fP ($\fBfields\fP, $filter=NULL, array $options=NULL, $ttl=0)"
.br
.ti -1c
.RI "\fBfind\fP ($filter=NULL, array $options=NULL, $ttl=0)"
.br
.ti -1c
.RI "\fBcount\fP ($filter=NULL, $ttl=0)"
.br
.ti -1c
.RI "\fBskip\fP ($ofs=1)"
.br
.ti -1c
.RI "\fBinsert\fP ()"
.br
.ti -1c
.RI "\fBupdate\fP ()"
.br
.ti -1c
.RI "\fBerase\fP ($filter=NULL)"
.br
.ti -1c
.RI "\fBreset\fP ()"
.br
.ti -1c
.RI "\fBcopyfrom\fP ($var, $func=NULL)"
.br
.ti -1c
.RI "\fBcopyto\fP ($key)"
.br
.ti -1c
.RI "\fBschema\fP ($\fBfields\fP=null)"
.br
.ti -1c
.RI "\fBfields\fP ($adhoc=TRUE)"
.br
.ti -1c
.RI "\fBrequired\fP ($field)"
.br
.ti -1c
.RI "\fBgetiterator\fP ()"
.br
.ti -1c
.RI "\fB__construct\fP (\\\fBDB\\SQL\fP $db, $\fBtable\fP, $\fBfields\fP=NULL, $ttl=60)"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "\fB$engine\fP"
.br
.RI "Database engine\&. "
.ti -1c
.RI "\fB$source\fP"
.br
.RI "\fBSQL\fP table\&. "
.ti -1c
.RI "\fB$table\fP"
.br
.RI "\fBSQL\fP table (quoted) "
.ti -1c
.RI "\fB$_id\fP"
.br
.RI "Last insert ID\&. "
.ti -1c
.RI "\fB$fields\fP"
.br
.RI "Defined fields\&. "
.ti -1c
.RI "\fB$adhoc\fP =[]"
.br
.RI "Adhoc fields\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBfactory\fP ($row)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fB$db\fP"
.br
.RI "PDO wrapper\&. "
.in -1c
.SH "Detailed Description"
.PP 
\fBSQL\fP data mapper\&. 
.PP
Definition at line 26 of file mapper\&.php\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "__construct (\\\fBDB\\SQL\fP $db,  $table,  $fields = \fCNULL\fP,  $ttl = \fC60\fP)"
Instantiate class 
.PP
\fBParameters:\fP
.RS 4
\fI$db\fP object 
.br
\fI$table\fP string 
.br
\fI$fields\fP array|string 
.br
\fI$ttl\fP int|array 
.RE
.PP

.PP
Definition at line 633 of file mapper\&.php\&.
.SH "Member Function Documentation"
.PP 
.SS "cast ( $obj = \fCNULL\fP)"
Return fields of mapper object as an associative array 
.PP
\fBReturns:\fP
.RS 4
array 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$obj\fP object 
.RE
.PP

.PP
Definition at line 183 of file mapper\&.php\&.
.SS "changed ( $key = \fCNULL\fP)"
Return TRUE if any/specified field value has changed 
.PP
\fBReturns:\fP
.RS 4
bool 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$key\fP string 
.RE
.PP

.PP
Definition at line 74 of file mapper\&.php\&.
.SS "clear ( $key)"
Clear value of field 
.PP
\fBReturns:\fP
.RS 4
NULL 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$key\fP string 
.RE
.PP

.PP
Definition at line 127 of file mapper\&.php\&.
.SS "copyfrom ( $var,  $func = \fCNULL\fP)"
Hydrate mapper object using hive array variable 
.PP
\fBReturns:\fP
.RS 4
NULL 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$var\fP array|string 
.br
\fI$func\fP callback 
.RE
.PP

.PP
Definition at line 567 of file mapper\&.php\&.
.SS "copyto ( $key)"
Populate hive array variable with mapper fields 
.PP
\fBReturns:\fP
.RS 4
NULL 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$key\fP string 
.RE
.PP

.PP
Definition at line 582 of file mapper\&.php\&.
.SS "count ( $filter = \fCNULL\fP,  $ttl = \fC0\fP)"
Count records that match criteria 
.PP
\fBReturns:\fP
.RS 4
int 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$filter\fP string|array 
.br
\fI$ttl\fP int|array 
.RE
.PP

.PP
Definition at line 329 of file mapper\&.php\&.
.SS "dbtype ()"
Return database type 
.PP
\fBReturns:\fP
.RS 4
string 
.RE
.PP

.PP
Definition at line 48 of file mapper\&.php\&.
.SS "erase ( $filter = \fCNULL\fP)"
Delete current record 
.PP
\fBReturns:\fP
.RS 4
int 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$filter\fP string|array 
.RE
.PP

.PP
Definition at line 494 of file mapper\&.php\&.
.SS "exists ( $key)"
Return TRUE if field is defined 
.PP
\fBReturns:\fP
.RS 4
bool 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$key\fP string 
.RE
.PP

.PP
Definition at line 65 of file mapper\&.php\&.
.SS "factory ( $row)\fC [protected]\fP"
Convert array to mapper object 
.PP
\fBReturns:\fP
.RS 4
object 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$row\fP array 
.RE
.PP

.PP
Definition at line 157 of file mapper\&.php\&.
.SS "fields ( $adhoc = \fCTRUE\fP)"
Return field names 
.PP
\fBReturns:\fP
.RS 4
array 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$adhoc\fP bool 
.RE
.PP

.PP
Definition at line 604 of file mapper\&.php\&.
.SS "find ( $filter = \fCNULL\fP, array $options = \fCNULL\fP,  $ttl = \fC0\fP)"
Return records that match criteria 
.PP
\fBReturns:\fP
.RS 4
static[] 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$filter\fP string|array 
.br
\fI$options\fP array 
.br
\fI$ttl\fP int|array 
.RE
.PP

.PP
Definition at line 304 of file mapper\&.php\&.
.SS "& get ( $key)"
Retrieve value of field 
.PP
\fBReturns:\fP
.RS 4
scalar 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$key\fP string 
.RE
.PP

.PP
Definition at line 112 of file mapper\&.php\&.
.SS "getiterator ()"
Retrieve external iterator for fields 
.PP
\fBReturns:\fP
.RS 4
object 
.RE
.PP

.PP
Definition at line 622 of file mapper\&.php\&.
.SS "insert ()"
Insert new record 
.PP
\fBReturns:\fP
.RS 4
object 
.RE
.PP

.PP
Definition at line 377 of file mapper\&.php\&.
.SS "required ( $field)"
Return TRUE if field is not nullable 
.PP
\fBReturns:\fP
.RS 4
bool 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$field\fP string 
.RE
.PP

.PP
Definition at line 613 of file mapper\&.php\&.
.SS "reset ()"
Reset cursor 
.PP
\fBReturns:\fP
.RS 4
NULL 
.RE
.PP

.PP
Definition at line 545 of file mapper\&.php\&.
.SS "schema ( $fields = \fCnull\fP)"
Return schema and, if the first argument is provided, update it 
.PP
\fBReturns:\fP
.RS 4
array 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$fields\fP NULL|array 
.RE
.PP

.PP
Definition at line 593 of file mapper\&.php\&.
.SS "select ( $fields,  $filter = \fCNULL\fP, array $options = \fCNULL\fP,  $ttl = \fC0\fP)"
Build query string and execute 
.PP
\fBReturns:\fP
.RS 4
static[] 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$fields\fP string 
.br
\fI$filter\fP string|array 
.br
\fI$options\fP array 
.br
\fI$ttl\fP int|array 
.RE
.PP

.PP
Definition at line 202 of file mapper\&.php\&.
.SS "set ( $key,  $val)"
Assign value to field 
.PP
\fBReturns:\fP
.RS 4
scalar 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$key\fP string 
.br
\fI$val\fP scalar 
.RE
.PP

.PP
Definition at line 89 of file mapper\&.php\&.
.SS "skip ( $ofs = \fC1\fP)"
Return record at specified offset using same criteria as previous \fBload()\fP call and make it active 
.PP
\fBReturns:\fP
.RS 4
array 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$ofs\fP int 
.RE
.PP

.PP
Definition at line 353 of file mapper\&.php\&.
.SS "table ()"
Return mapped table 
.PP
\fBReturns:\fP
.RS 4
string 
.RE
.PP

.PP
Definition at line 56 of file mapper\&.php\&.
.SS "type ( $pdo)"
Get PHP type equivalent of PDO constant 
.PP
\fBReturns:\fP
.RS 4
string 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI$pdo\fP string 
.RE
.PP

.PP
Definition at line 137 of file mapper\&.php\&.
.SS "update ()"
Update current record 
.PP
\fBReturns:\fP
.RS 4
object 
.RE
.PP

.PP
Definition at line 449 of file mapper\&.php\&.
.SH "Field Documentation"
.PP 
.SS "$_id"

.PP
Last insert ID\&. 
.PP
Definition at line 30 of file mapper\&.php\&.
.SS "$adhoc =[]"

.PP
Adhoc fields\&. 
.PP
Definition at line 42 of file mapper\&.php\&.
.SS "$db\fC [protected]\fP"

.PP
PDO wrapper\&. 
.PP
Definition at line 30 of file mapper\&.php\&.
.SS "$engine"

.PP
Database engine\&. 
.PP
Definition at line 30 of file mapper\&.php\&.
.SS "$\fBfields\fP"

.PP
Defined fields\&. 
.PP
Definition at line 30 of file mapper\&.php\&.
.SS "$source"

.PP
\fBSQL\fP table\&. 
.PP
Definition at line 30 of file mapper\&.php\&.
.SS "$\fBtable\fP"

.PP
\fBSQL\fP table (quoted) 
.PP
Definition at line 30 of file mapper\&.php\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Fat-Free Framework from the source code\&.
