<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="-1" kind="page">
    <compoundname>-1</compoundname>
    <title>) }}</title>
    <detaileddescription>
<para>{{ (int)765.29+1.2e3 }} &lt;option value=&quot;F&quot; {{ ?&apos;selected=&quot;selected&quot;&apos;:&apos;&apos; }}&gt;Female&lt;/option&gt; {{ var_dump() }} </para><para>That is {{ preg_match(&apos;/Yes/i&apos;,)?&apos;correct&apos;:&apos;wrong&apos; }}!</para><para>{{ -&gt;property }} <programlisting><codeline><highlight class="normal">An<sp/>additional<sp/>note<sp/>about<sp/>array<sp/>expressions:<sp/>Take<sp/>note<sp/>that<sp/>`@foo.@bar`<sp/>is<sp/>a<sp/>string<sp/>concatenation<sp/>`$foo.$bar`),<sp/>whereas<sp/>`@foo.bar`<sp/>translates<sp/>to<sp/>`$foo[&apos;bar&apos;]`.<sp/>If<sp/>`$foo[$bar]`<sp/>is<sp/>what<sp/>you<sp/>intended,<sp/>use<sp/>the<sp/>`@foo[@bar]`<sp/>regular<sp/>notation.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Framework<sp/>variables<sp/>may<sp/>also<sp/>contain<sp/>anonymous<sp/>functions:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```<sp/>php</highlight></codeline>
<codeline><highlight class="normal">$f3-&gt;set(&apos;func&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function($a,$b)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>$a.&apos;,<sp/>&apos;.$b;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>The <ref refid="class_f3" kindref="compound">F3</ref> template engine will interpret the token as expected, if you specify the following expression:</para><para><programlisting><codeline><highlight class="normal">{{<sp/>@func(&apos;hello&apos;,&apos;world&apos;)<sp/>}}</highlight></codeline>
</programlisting></para><para><heading level="3">Templates Within Templates</heading>
</para><para>Simple variable substitution is one thing all template engines have. Fat-Free has more up its sleeves:-</para><para><programlisting><codeline><highlight class="normal">&lt;include<sp/>href=&quot;header.htm&quot;<sp/>/&gt;</highlight></codeline>
</programlisting></para><para>The  directive will embed the contents of the header.htm template at the exact position where the directive is stated. You can also have dynamic content in the form of:-</para><para><programlisting><codeline><highlight class="normal">&lt;include<sp/>href=&quot;{{<sp/>@content<sp/>}}&quot;<sp/>/&gt;</highlight></codeline>
</programlisting></para><para>A practical use for such template directive is when you have several pages with a common HTML layout but with different content. Instructing the framework to insert a sub-template into your main template is as simple as writing the following PHP code:-</para><para><programlisting><codeline><highlight class="normal">//<sp/>switch<sp/>content<sp/>to<sp/>your<sp/>blog<sp/>sub-template</highlight></codeline>
<codeline><highlight class="normal">$f3-&gt;set(&apos;content&apos;,&apos;blog.htm&apos;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>in<sp/>another<sp/>route,<sp/>switch<sp/>content<sp/>to<sp/>the<sp/>wiki<sp/>sub-template</highlight></codeline>
<codeline><highlight class="normal">$f3-&gt;set(&apos;content&apos;,&apos;wiki.htm&apos;);</highlight></codeline>
</programlisting></para><para>A sub-template may in turn contain any number of  directives. <ref refid="class_f3" kindref="compound">F3</ref> allows unlimited nested templates.</para><para>You can specify filenames with something other than .htm or .html file extensions, but it&apos;s easier to preview them in your <ref refid="class_web" kindref="compound">Web</ref> browser during the development and debugging phase. The template engine is not limited to rendering HTML files. In fact you can use the template engine to render other kinds of files.</para><para>The <computeroutput>&lt;include&gt;</computeroutput> directive also has an optional <computeroutput>if</computeroutput> attribute so you can specify a condition that needs to be satisfied before the sub-template is inserted:-</para><para><programlisting><codeline><highlight class="normal">&lt;include<sp/>if=&quot;{{<sp/>count(@items)<sp/>}}&quot;<sp/>href=&quot;items.htm&quot;<sp/>/&gt;</highlight></codeline>
</programlisting></para><para><heading level="3">Exclusion of Segments</heading>
</para><para>During the course of writing/debugging F3-powered programs and designing templates, there may be instances when disabling the display of a block of HTML may be handy. You can use the <computeroutput>&lt;exclude&gt;</computeroutput> directive for this purpose:-</para><para><programlisting><codeline><highlight class="normal">&lt;exclude&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;p&gt;A<sp/>chunk<sp/>of<sp/>HTML<sp/>we<sp/>don&apos;t<sp/>want<sp/>displayed<sp/>at<sp/>the<sp/>moment&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/exclude&gt;</highlight></codeline>
</programlisting></para><para>That&apos;s like the `<computeroutput>HTML comment tag, but the</computeroutput>&lt;exclude&gt;` directive makes the HTML block totally invisible once the template is rendered.</para><para>Here&apos;s another way of excluding template content or adding comments:-</para><para><programlisting><codeline><highlight class="normal">{*<sp/>&lt;p&gt;A<sp/>chunk<sp/>of<sp/>HTML<sp/>we<sp/>don&apos;t<sp/>want<sp/>displayed<sp/>at<sp/>the<sp/>moment&lt;/p&gt;<sp/>*}</highlight></codeline>
</programlisting></para><para><heading level="3">Conditional Segments</heading>
</para><para>Another useful template feature is the <computeroutput>&lt;check&gt;</computeroutput> directive. It allows you to embed an HTML fragment depending on the evaluation of a certain condition. Here are a few examples:-</para><para><programlisting><codeline><highlight class="normal">&lt;check<sp/>if=&quot;{{<sp/>@page==&apos;Home&apos;<sp/>}}&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;false&gt;&lt;span&gt;Inserted<sp/>if<sp/>condition<sp/>is<sp/>false&lt;/span&gt;&lt;/false&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/check&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;check<sp/>if=&quot;{{<sp/>@gender==&apos;M&apos;<sp/>}}&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;true&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;div&gt;Appears<sp/>when<sp/>condition<sp/>is<sp/>true&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/true&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;false&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;div&gt;Appears<sp/>when<sp/>condition<sp/>is<sp/>false&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/false&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/check&gt;</highlight></codeline>
</programlisting></para><para>You can have as many nested <computeroutput>&lt;check&gt;</computeroutput> directives as you need.</para><para>An <ref refid="class_f3" kindref="compound">F3</ref> expression inside an if attribute that equates to <computeroutput>NULL</computeroutput>, an empty string, a boolean <computeroutput>FALSE</computeroutput>, an empty array or zero, automatically invokes <computeroutput>&lt;false&gt;</computeroutput>. If your template has no <computeroutput>&lt;false&gt;</computeroutput> block, then the <computeroutput>&lt;true&gt;</computeroutput> opening and closing tags are optional:-</para><para><programlisting><codeline><highlight class="normal">&lt;check<sp/>if=&quot;{{<sp/>@loggedin<sp/>}}&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;p&gt;HTML<sp/>chunk<sp/>to<sp/>be<sp/>included<sp/>if<sp/>condition<sp/>is<sp/>true&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/check&gt;</highlight></codeline>
</programlisting></para><para><heading level="3">Repeating Segments</heading>
</para><para>Fat-Free can also handle repetitive HTML blocks:-</para><para><programlisting><codeline><highlight class="normal">&lt;repeat<sp/>group=&quot;{{<sp/>@fruits<sp/>}}&quot;<sp/>value=&quot;{{<sp/>@fruit<sp/>}}&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;p&gt;{{<sp/>trim(@fruit)<sp/>}}&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/repeat&gt;</highlight></codeline>
</programlisting></para><para>The <computeroutput>group</computeroutput> attribute <computeroutput>@fruits</computeroutput> inside the <computeroutput>&lt;repeat&gt;</computeroutput> directive must be an array and should be set in your PHP code accordingly:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;set(&apos;fruits&apos;,array(&apos;apple&apos;,&apos;orange<sp/>&apos;,&apos;<sp/>banana&apos;));</highlight></codeline>
</programlisting></para><para>Nothing is gained by assigning a value to <computeroutput>@fruit</computeroutput> in your application code. Fat-Free ignores any preset value it may have because it uses the variable to represent the current item during iteration over the group. The output of the above HTML template fragment and the corresponding PHP code becomes:-</para><para><programlisting><codeline><highlight class="normal">&lt;p&gt;apple&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;orange&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;banana&lt;/p&gt;</highlight></codeline>
</programlisting></para><para>The framework allows unlimited nesting of <computeroutput>&lt;repeat&gt;</computeroutput> blocks:-</para><para><programlisting><codeline><highlight class="normal">&lt;repeat<sp/>group=&quot;{{<sp/>@div<sp/>}}&quot;<sp/>key=&quot;{{<sp/>@ikey<sp/>}}&quot;<sp/>value=&quot;{{<sp/>@idiv<sp/>}}&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;div&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;p&gt;&lt;span&gt;&lt;b&gt;{{<sp/>@ikey<sp/>}}&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;p&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;repeat<sp/>group=&quot;{{<sp/>@idiv<sp/>}}&quot;<sp/>value=&quot;{{<sp/>@ispan<sp/>}}&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;span&gt;{{<sp/>@ispan<sp/>}}&lt;/span&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/repeat&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/repeat&gt;</highlight></codeline>
</programlisting></para><para>Apply the following <ref refid="class_f3" kindref="compound">F3</ref> command:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;set(&apos;div&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;coffee&apos;=&gt;array(&apos;arabica&apos;,&apos;barako&apos;,&apos;liberica&apos;,&apos;kopiluwak&apos;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;tea&apos;=&gt;array(&apos;darjeeling&apos;,&apos;pekoe&apos;,&apos;samovar&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>As a result, you get the following HTML fragment:-</para><para><programlisting><codeline><highlight class="normal">&lt;div&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;p&gt;&lt;span&gt;&lt;b&gt;coffee&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;p&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;span&gt;arabica&lt;/span&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;span&gt;barako&lt;/span&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;span&gt;liberica&lt;/span&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;span&gt;kopiluwak&lt;/span&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;div&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;p&gt;&lt;span&gt;&lt;b&gt;tea&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;p&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;span&gt;darjeeling&lt;/span&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;span&gt;pekoe&lt;/span&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;span&gt;samovar&lt;/span&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/div&gt;</highlight></codeline>
</programlisting></para><para>Amazing, isn&apos;t it? And the only thing you had to do in PHP was to define the contents of a single <ref refid="class_f3" kindref="compound">F3</ref> variable <computeroutput>div</computeroutput> to replace the <computeroutput>@div</computeroutput> token. Fat-Free makes both programming and <ref refid="class_web" kindref="compound">Web</ref> template design really easy.</para><para>The <computeroutput>&lt;repeat&gt;</computeroutput> template directive&apos;s <computeroutput>value</computeroutput> attribute returns the value of the current element in the iteration. If you need to get the array key of the current element, use the <computeroutput>key</computeroutput> attribute instead. The <computeroutput>key</computeroutput> attribute is optional.</para><para><computeroutput>&lt;repeat&gt;</computeroutput> also has an optional counter attribute that can be used as follows:-</para><para><programlisting><codeline><highlight class="normal">&lt;repeat<sp/>group=&quot;{{<sp/>@fruits<sp/>}}&quot;<sp/>value=&quot;{{<sp/>@fruit<sp/>}}&quot;<sp/>counter=&quot;{{<sp/>@ctr<sp/>}}&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;p<sp/>class=&quot;{{<sp/>@ctr%2?&apos;odd&apos;:&apos;even&apos;<sp/>}}&quot;&gt;{{<sp/>trim(@fruit)<sp/>}}&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/repeat&gt;</highlight></codeline>
</programlisting></para><para>Internally, <ref refid="class_f3" kindref="compound">F3</ref>&apos;s template engine records the number of loop iterations and saves that value in the variable/token <computeroutput>@ctr</computeroutput>, which is used in our example to determine the odd/even classification.</para><para><heading level="3">Embedding Javascript and CSS</heading>
</para><para>If you have to insert <ref refid="class_f3" kindref="compound">F3</ref> tokens inside a <computeroutput>&lt;script&gt;</computeroutput> or <computeroutput>&lt;style&gt;</computeroutput> section of your template, the framework will still replace them the usual way:-</para><para><programlisting><codeline><highlight class="normal">&lt;script<sp/>type=&quot;text/javascript&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>notify()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alert(&apos;You<sp/>are<sp/>logged<sp/>in<sp/>as:<sp/>{{<sp/>@userID<sp/>}}&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">&lt;/script&gt;</highlight></codeline>
</programlisting></para><para>Embedding template directives inside your <computeroutput>&lt;script&gt;</computeroutput> or <computeroutput>&lt;style&gt;</computeroutput> tags requires no special handling:-</para><para><programlisting><codeline><highlight class="normal">&lt;script<sp/>type=&quot;text/javascript&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>discounts=[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;repeat<sp/>group=&quot;{{<sp/>@rates<sp/>}}&quot;<sp/>value=&quot;{{<sp/>@rate<sp/>}}&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>whatever<sp/>you<sp/>want<sp/>to<sp/>repeat<sp/>in<sp/>Javascript,<sp/>e.g.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>discounts.push(&quot;{{<sp/>@rate<sp/>}}&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/repeat&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/script&gt;</highlight></codeline>
</programlisting></para><para><heading level="3">Document Encoding</heading>
</para><para>By default, Fat-Free uses the UTF-8 character set unless changed. You can override this behavior by issuing something like:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;set(&apos;ENCODING&apos;,&apos;ISO-8859-1&apos;);</highlight></codeline>
</programlisting></para><para>Once you inform the framework of the desired character set, <ref refid="class_f3" kindref="compound">F3</ref> will use it in all HTML and XML templates until altered again.</para><para><heading level="3">All Kinds of Templates</heading>
</para><para>As mentioned earlier in this section, the framework isn&apos;t limited to HTML templates. You can process XML templates just as well. The mechanics are pretty much similar. You still have the same <computeroutput>{{ @variable }}</computeroutput> and <computeroutput>{{ expression }}</computeroutput> tokens, <computeroutput>&lt;repeat&gt;</computeroutput>, <computeroutput>&lt;check&gt;</computeroutput>, <computeroutput>&lt;include&gt;</computeroutput>, and <computeroutput>&lt;exclude&gt;</computeroutput> directives at your disposal. Just tell <ref refid="class_f3" kindref="compound">F3</ref> that you&apos;re passing an XML file instead of HTML:-</para><para><programlisting><codeline><highlight class="normal">echo<sp/>Template::instance()-&gt;render(&apos;template.xml&apos;,&apos;application/xml&apos;);</highlight></codeline>
</programlisting></para><para>The second argument represents the MIME type of the document being rendered.</para><para>The <ref refid="class_view" kindref="compound">View</ref> component of MVC covers everything that doesn&apos;t fall under the Model and Controller, which means your presentation can and should include all kinds of user interfaces, like RSS, e-mail, RDF, FOAF, text files, etc. The example below shows you how to separate your e-mail presentation from your application&apos;s business logic:-</para><para><programlisting><codeline><highlight class="normal">MIME-Version:<sp/>1.0</highlight></codeline>
<codeline><highlight class="normal">Content-type:<sp/>text/html;<sp/>charset={{<sp/>@ENCODING<sp/>}}</highlight></codeline>
<codeline><highlight class="normal">From:<sp/>{{<sp/>@from<sp/>}}</highlight></codeline>
<codeline><highlight class="normal">To:<sp/>{{<sp/>@to<sp/>}}</highlight></codeline>
<codeline><highlight class="normal">Subject:<sp/>{{<sp/>@subject<sp/>}}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;p&gt;Welcome,<sp/>and<sp/>thanks<sp/>for<sp/>joining<sp/>{{<sp/>@site<sp/>}}!&lt;/p&gt;</highlight></codeline>
</programlisting></para><para>Save the above e-mail template as welcome.txt. The associated <ref refid="class_f3" kindref="compound">F3</ref> code would be:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;set(&apos;from&apos;,&apos;&lt;no-reply@mysite.com&gt;&apos;);</highlight></codeline>
<codeline><highlight class="normal">$f3-&gt;set(&apos;to&apos;,&apos;&lt;slasher@throats.com&gt;&apos;);</highlight></codeline>
<codeline><highlight class="normal">$f3-&gt;set(&apos;subject&apos;,&apos;Welcome&apos;);</highlight></codeline>
<codeline><highlight class="normal">ini_set(&apos;sendmail_from&apos;,$f3-&gt;get(&apos;from&apos;));</highlight></codeline>
<codeline><highlight class="normal">mail(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>$f3-&gt;get(&apos;to&apos;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>$f3-&gt;get(&apos;subject&apos;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Template::instance()-&gt;render(&apos;email.txt&apos;,&apos;text/html&apos;)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>Tip: Replace the <ref refid="class_s_m_t_p" kindref="compound">SMTP</ref> mail() function with imap_mail() if your script communicates with an IMAP server.</para><para>Now isn&apos;t that something? Of course, if you have a bundle of e-mail recipients, you&apos;d be using a database to populate the firstName, lastName, and email tokens.</para><para>Here&apos;s an alternative solution using the <ref refid="class_f3" kindref="compound">F3</ref>&apos;s <ref refid="class_s_m_t_p" kindref="compound">SMTP</ref> plug-in:-</para><para><programlisting><codeline><highlight class="normal">$mail=new<sp/>SMTP(&apos;smtp.gmail.com&apos;,465,&apos;SSL&apos;,&apos;account@gmail.com&apos;,&apos;secret&apos;);</highlight></codeline>
<codeline><highlight class="normal">$mail-&gt;set(&apos;from&apos;,&apos;&lt;no-reply@mysite.com&gt;&apos;);</highlight></codeline>
<codeline><highlight class="normal">$mail-&gt;set(&apos;to&apos;,&apos;&quot;Slasher&quot;<sp/>&lt;slasher@throats.com&gt;&apos;);</highlight></codeline>
<codeline><highlight class="normal">$mail-&gt;set(&apos;subject&apos;,&apos;Welcome&apos;);</highlight></codeline>
<codeline><highlight class="normal">$mail-&gt;send(Template::instance()-&gt;render(&apos;email.txt&apos;));</highlight></codeline>
</programlisting></para><para><heading level="3">Multilingual Support</heading>
</para><para><ref refid="class_f3" kindref="compound">F3</ref> supports multiple languages right out of the box.</para><para>First, create a dictionary file with the following structure (one file per language):-</para><para><programlisting><codeline><highlight class="normal">&lt;?php</highlight></codeline>
<codeline><highlight class="normal">return<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;love&apos;=&gt;&apos;I<sp/>love<sp/>F3&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;today&apos;=&gt;&apos;Today<sp/>is<sp/>{0,date}&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;pi&apos;=&gt;&apos;{0,number}&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;money&apos;=&gt;&apos;Amount<sp/>remaining:<sp/>{0,number,currency}&apos;</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>Save it as <computeroutput>dict/en.php</computeroutput>. Let&apos;s create another dictionary, this time for German. Save the file as <computeroutput>dict/de.php</computeroutput>:-</para><para><programlisting><codeline><highlight class="normal">&lt;?php</highlight></codeline>
<codeline><highlight class="normal">return<sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;love&apos;=&gt;&apos;Ich<sp/>liebe<sp/>F3&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;today&apos;=&gt;&apos;Heute<sp/>ist<sp/>{0,date}&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;money&apos;=&gt;&apos;Restbetrag:<sp/>{0,number,currency}&apos;</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>Dictionaries are nothing more than key-value pairs. <ref refid="class_f3" kindref="compound">F3</ref> automatically instantiates framework variables based on the keys in the language files. As such, it&apos;s easy to embed these variables as tokens in your templates. Using the <ref refid="class_f3" kindref="compound">F3</ref> template engine:-</para><para><programlisting><codeline><highlight class="normal">&lt;h1&gt;{{<sp/>@love<sp/>}}&lt;/h1&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline><highlight class="normal">{{<sp/>@today,time()<sp/>|<sp/>format<sp/>}}.&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal">{{<sp/>@money,365.25<sp/>|<sp/>format<sp/>}}&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal">{{<sp/>@pi<sp/>}}</highlight></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
</programlisting></para><para>And the longer version that utilizes PHP as a template engine:-</para><para><programlisting><codeline><highlight class="normal">&lt;?php<sp/>$f3=Base::instance();<sp/>?&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;h1&gt;&lt;?php<sp/>echo<sp/>$f3-&gt;get(&apos;love&apos;);<sp/>?&gt;&lt;/h1&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;?php<sp/>echo<sp/>$f3-&gt;get(&apos;today&apos;,time());<sp/>?&gt;.&lt;br<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;?php<sp/>echo<sp/>$f3-&gt;get(&apos;money&apos;,365.25);<sp/>?&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;?php<sp/>echo<sp/>$f3-&gt;get(&apos;pi&apos;);<sp/>?&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
</programlisting></para><para>Next, we instruct <ref refid="class_f3" kindref="compound">F3</ref> to look for dictionaries in the <computeroutput>dict/</computeroutput> folder:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;set(&apos;LOCALES&apos;,&apos;dict/&apos;);</highlight></codeline>
</programlisting></para><para>But how does the framework determine which language to use? <ref refid="class_f3" kindref="compound">F3</ref> will detect it automatically by looking at the HTTP request headers first, specifically the <computeroutput>Accept-Language</computeroutput> header sent by the browser.</para><para>To override this behavior, you can trigger <ref refid="class_f3" kindref="compound">F3</ref> to use a language specified by the user or application:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;set(&apos;LANGUAGE&apos;,&apos;de&apos;);</highlight></codeline>
</programlisting></para><para><bold>Note:</bold> In the above example, the key pi exists only in the English dictionary. The framework will always use English (<computeroutput>en</computeroutput>) as a fallback to populate keys that are not present in the specified (or detected) language.</para><para>You may also create dictionary files for language variants like <computeroutput>en-US</computeroutput>, <computeroutput>es-AR</computeroutput>, etc. In this case, <ref refid="class_f3" kindref="compound">F3</ref> will use the language variant first (like <computeroutput>es-AR</computeroutput>). If there are keys that do not exist in the variant, the framework will look up the key in the root language (<computeroutput>es</computeroutput>), then use the <computeroutput>en</computeroutput> language file as the final fallback. Dictionary key-value pairs become <ref refid="class_f3" kindref="compound">F3</ref> variables once referenced. Make sure the keys do not conflict with any framework variable instantiated via <computeroutput>$f3-&gt;set()</computeroutput>, <computeroutput>$f3-&gt;mset()</computeroutput>, or <computeroutput>$f3-&gt;config()</computeroutput>.</para><para>Did you notice the peculiar <computeroutput>&apos;Today is {0,date}&apos;</computeroutput> pattern in our previous example? <ref refid="class_f3" kindref="compound">F3</ref>&apos;s multilingual capability hinges on string/message formatting rules of the ICU project. The framework uses its own subset of the ICU string formatting implementation. There is no need for PHP&apos;s <computeroutput>intl</computeroutput> extension to be activated on the server.</para><para>One more thing: <ref refid="class_f3" kindref="compound">F3</ref> can also load .ini-style formatted files as dictionaries:-</para><para><programlisting><codeline><highlight class="normal">love=&quot;I<sp/>love<sp/>F3&quot;</highlight></codeline>
<codeline><highlight class="normal">today=&quot;Today<sp/>is<sp/>{0,date}&quot;</highlight></codeline>
<codeline><highlight class="normal">pi=&quot;{0,number}&quot;</highlight></codeline>
<codeline><highlight class="normal">money=&quot;Amount<sp/>remaining:<sp/>{0,number,currency}&quot;</highlight></codeline>
</programlisting></para><para>Save it as <computeroutput>dict/en.ini</computeroutput> so the framework can load it automatically.</para><para><heading level="3">Data Sanitation</heading>
</para><para>By default, both view handler and template engine escapes all rendered variables, i.e. converted to HTML entities to protect you from possible XSS and code injection attacks. On the other hand, if you wish to pass valid HTML fragments from your application code to your template:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;set(&apos;ESCAPE&apos;,FALSE);</highlight></codeline>
</programlisting></para><para>This may have undesirable effects. You might not want all variables to pass through unescaped. Fat-Free allows you to unescape variables individually. For <ref refid="class_f3" kindref="compound">F3</ref> templates:-</para><para><programlisting><codeline><highlight class="normal">{{<sp/>@html_content<sp/>|<sp/>raw<sp/>}}</highlight></codeline>
</programlisting></para><para>In the case of PHP templates:-</para><para><programlisting><codeline><highlight class="normal">&lt;?php<sp/>echo<sp/>View::instance()-&gt;raw($html_content);<sp/>?&gt;</highlight></codeline>
</programlisting></para><para>As an addition to auto-escaping of <ref refid="class_f3" kindref="compound">F3</ref> variables, the framework also gives you a free hand at sanitizing user input from HTML forms:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;scrub($_GET,&apos;p;<sp/>br;<sp/>span;<sp/>div;<sp/>a&apos;);</highlight></codeline>
</programlisting></para><para>This command will strip all tags (except those specified in the second argument) and unsafe characters from the specified variable. If the variable contains an array, each element in the array is sanitized recursively. If an asterisk (*) is passed as the second argument, <computeroutput>$f3-&gt;scrub()</computeroutput> permits all HTML tags to pass through untouched and simply remove unsafe control characters.</para><para><heading level="2">Databases</heading>
</para><para><heading level="3">Connecting to a Database Engine</heading>
</para><para>Fat-Free is designed to make the job of interfacing with SQL databases a breeze. If you&apos;re not the type to immerse yourself in details about SQL, but lean more towards object-oriented data handling, you can go directly to the next section of this tutorial. However, if you need to do some complex data-handling and database performance optimization tasks, SQL is the way to go.</para><para>Establishing communication with a SQL engine like MySQL, SQLite, SQL Server, Sybase, and Oracle is done using the familiar <computeroutput>$f3-&gt;set()</computeroutput> command. Connecting to a SQLite database would be:-</para><para><programlisting><codeline><highlight class="normal">$db=new<sp/>DB\SQL(&apos;sqlite:/absolute/path/to/your/database.sqlite&apos;);</highlight></codeline>
</programlisting></para><para>Another example, this time with MySQL:-</para><para><programlisting><codeline><highlight class="normal">$db=new<sp/>DB\SQL(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;mysql:host=localhost;port=3306;dbname=mysqldb&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;admin&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;p455w0rD&apos;</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para><heading level="3">Querying the Database</heading>
</para><para>OK. That was easy, wasn&apos;t it? That&apos;s pretty much how you would do the same thing in ordinary PHP. You just need to know the DSN format of the database you&apos;re connecting to. See the PDO section of the PHP manual.</para><para>Let&apos;s continue our PHP code:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;set(&apos;result&apos;,$db-&gt;exec(&apos;SELECT<sp/>brandName<sp/>FROM<sp/>wherever&apos;));</highlight></codeline>
<codeline><highlight class="normal">echo<sp/>Template::instance()-&gt;render(&apos;abc.htm&apos;);</highlight></codeline>
</programlisting></para><para>Huh, what&apos;s going on here? Shouldn&apos;t we be setting up things like PDOs, statements, cursors, etc.? The simple answer is: you don&apos;t have to. <ref refid="class_f3" kindref="compound">F3</ref> simplifies everything by taking care of all the hard work in the backend.</para><para>This time we create an HTML template like <computeroutput>abc.htm</computeroutput> that has at a minimum the following:-</para><para><programlisting><codeline><highlight class="normal">&lt;repeat<sp/>group=&quot;{{<sp/>@result<sp/>}}&quot;<sp/>value=&quot;{{<sp/>@item<sp/>}}&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;span&gt;{{<sp/>@item.brandName<sp/><sp/>}}&lt;/span&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/repeat&gt;</highlight></codeline>
</programlisting></para><para>In most instances, the SQL command set should be enough to generate a Web-ready result so you can use the <computeroutput>result</computeroutput> array variable in your template directly. Be that as it may, Fat-Free will not stop you from getting into its SQL handler internals. In fact, <ref refid="class_f3" kindref="compound">F3</ref>&apos;s <computeroutput><ref refid="namespace_d_b" kindref="compound">DB</ref>\SQL</computeroutput> class derives directly from PHP&apos;s <computeroutput>PDO</computeroutput> class, so you still have access to the underlying PDO components and primitives involved in each process, if you need some fine-grain control.</para><para><heading level="3">Transactions</heading>
</para><para>Here&apos;s another example. Instead of a single statement provided as an argument to the <computeroutput>$db-&gt;exec()</computeroutput> command, you can also pass an array of SQL statements:-</para><para><programlisting><codeline><highlight class="normal">$db-&gt;exec(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;DELETE<sp/>FROM<sp/>diet<sp/>WHERE<sp/>food=&quot;cola&quot;&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;INSERT<sp/>INTO<sp/>diet<sp/>(food)<sp/>VALUES<sp/>(&quot;carrot&quot;)&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;SELECT<sp/>*<sp/>FROM<sp/>diet&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para><ref refid="class_f3" kindref="compound">F3</ref> is smart enough to know that if you&apos;re passing an array of SQL instructions, this indicates a SQL batch transaction. You don&apos;t have to worry about SQL rollbacks and commits because the framework will automatically revert to the initial state of the database if any error occurs during the transaction. If successful, <ref refid="class_f3" kindref="compound">F3</ref> commits all changes made to the database.</para><para>You can also start and end a transaction programmatically:-</para><para><programlisting><codeline><highlight class="normal">$db-&gt;begin();</highlight></codeline>
<codeline><highlight class="normal">$db-&gt;exec(&apos;DELETE<sp/>FROM<sp/>diet<sp/>WHERE<sp/>food=&quot;cola&quot;&apos;);</highlight></codeline>
<codeline><highlight class="normal">$db-&gt;exec(&apos;INSERT<sp/>INTO<sp/>diet<sp/>(food)<sp/>VALUES<sp/>(&quot;carrot&quot;)&apos;);</highlight></codeline>
<codeline><highlight class="normal">$db-&gt;exec(&apos;SELECT<sp/>*<sp/>FROM<sp/>diet&apos;);</highlight></codeline>
<codeline><highlight class="normal">$db-&gt;commit();</highlight></codeline>
</programlisting></para><para>A rollback will occur if any of the statements encounter an error.</para><para>To get a list of all database instructions issued:-</para><para><programlisting><codeline><highlight class="normal">echo<sp/>$db-&gt;log();</highlight></codeline>
</programlisting></para><para><heading level="3">Parameterized Queries</heading>
</para><para>Passing string arguments to SQL statements is fraught with danger. Consider this:-</para><para><programlisting><codeline><highlight class="normal">$db-&gt;exec(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;SELECT<sp/>*<sp/>FROM<sp/>users<sp/>&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;WHERE<sp/>username=&quot;&apos;.$f3-&gt;get(&apos;POST.userID&apos;.&apos;&quot;&apos;)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>If the <computeroutput>POST</computeroutput> variable <computeroutput>userID</computeroutput> does not go through any data sanitation process, a malicious user can pass the following string and damage your database irreversibly:-</para><para><programlisting><codeline><highlight class="normal">admin&quot;;<sp/>DELETE<sp/>FROM<sp/>users;<sp/>SELECT<sp/>&quot;1</highlight></codeline>
</programlisting></para><para>Luckily, parameterized queries help you mitigate these risks:-</para><para><programlisting><codeline><highlight class="normal">$db-&gt;exec(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;SELECT<sp/>*<sp/>FROM<sp/>users<sp/>WHERE<sp/>userID=?&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>$f3-&gt;get(&apos;POST.userID&apos;)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>If <ref refid="class_f3" kindref="compound">F3</ref> detects that the value of the query parameter/token is a string, the underlying data access layer escapes the string and adds quotes as necessary.</para><para>Our example in the previous section will be a lot safer from SQL injection if written this way:-</para><para><programlisting><codeline><highlight class="normal">$db-&gt;exec(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;DELETE<sp/>FROM<sp/>diet<sp/>WHERE<sp/>food=:name&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;INSERT<sp/>INTO<sp/>diet<sp/>(food)<sp/>VALUES<sp/>(?)&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;SELECT<sp/>*<sp/>FROM<sp/>diet&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array(&apos;:name&apos;=&gt;&apos;cola&apos;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array(1=&gt;&apos;carrot&apos;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para><heading level="3">CRUD (But With a Lot of Style)</heading>
</para><para><ref refid="class_f3" kindref="compound">F3</ref> is packed with easy-to-use object-relational mappers (ORMs) that sit between your application and your data - making it a lot easier and faster for you to write programs that handle common data operations - like creating, retrieving, updating, and deleting (CRUD) information from SQL and NoSQL databases. Data mappers do most of the work by mapping PHP object interactions to the corresponding backend queries.</para><para>Suppose you have an existing MySQL database containing a table of users of your application. (SQLite, PostgreSQL, SQL Server, Sybase will do just as well.) It would have been created using the following SQL command:-</para><para><programlisting><codeline><highlight class="normal">CREATE<sp/>TABLE<sp/>users<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>userID<sp/>VARCHAR(30),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>password<sp/>VARCHAR(30),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>visits<sp/>INT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PRIMARY<sp/>KEY(userID)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para><bold>Note:</bold> MongoDB is a NoSQL database engine and inherently schema-less. <ref refid="class_f3" kindref="compound">F3</ref> has its own fast and lightweight NoSQL implementation called Jig, which uses PHP-serialized or JSON-encoded flat files. These abstraction layers require no rigid data structures. Fields may vary from one record to another. They can also be defined or dropped on the fly.</para><para>Now back to SQL. First, we establish communication with our database.</para><para><programlisting><codeline><highlight class="normal">$db=new<sp/>DB\SQL(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;mysql:host=localhost;port=3306;dbname=mysqldb&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;admin&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;wh4t3v3r&apos;</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>To retrieve a record from our table:-</para><para><programlisting><codeline><highlight class="normal">$user=new<sp/>DB\SQL\Mapper($db,&apos;users&apos;);</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;load(array(&apos;userID=?&apos;,&apos;tarzan&apos;));</highlight></codeline>
</programlisting></para><para>The first line instantiates a data mapper object that interacts with the <computeroutput>users</computeroutput> table in our database. Behind the scene, <ref refid="class_f3" kindref="compound">F3</ref> retrieves the structure of the <computeroutput>users</computeroutput> table and determines which field(s) are defined as primary key(s). At this point, the mapper object contains no data yet (dry state) so <computeroutput>$user</computeroutput> is nothing more than a structured object - but it contains the methods it needs to perform the basic CRUD operations and some extras. To retrieve a record from our users table with a <computeroutput>userID</computeroutput> field containing the string value <computeroutput>tarzan</computeroutput>, we use the <computeroutput>load() method</computeroutput>. This process is called &quot;auto-hydrating&quot; the data mapper object.</para><para>Easy, wasn&apos;t it? <ref refid="class_f3" kindref="compound">F3</ref> understands that a SQL table already has a structural definition existing within the database engine itself. Unlike other frameworks, <ref refid="class_f3" kindref="compound">F3</ref> requires no extra class declarations (unless you want to extend the data mappers to fit complex objects), no redundant PHP array/object property-to-field mappings (duplication of efforts), no code generators (which require code regeneration if the database structure changes), no stupid XML/YAML files to configure your models, no superfluous commands just to retrieve a single record. With <ref refid="class_f3" kindref="compound">F3</ref>, a simple resizing of a <computeroutput>varchar</computeroutput> field in MySQL does not demand a change in your application code. Consistent with MVC and &quot;separation of concerns&quot;, the database admin has as much control over the data (and the structures) as a template designer has over HTML/XML templates.</para><para>If you prefer working with NoSQL databases, the similarities in query syntax are superficial. In the case of the MongoDB data mapper, the equivalent code would be:-</para><para><programlisting><codeline><highlight class="normal">$db=new<sp/>DB\Mongo(&apos;mongodb://localhost:27017&apos;,&apos;testdb&apos;);</highlight></codeline>
<codeline><highlight class="normal">$user=new<sp/>DB\Mongo\Mapper($db,&apos;users&apos;);</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;load(array(&apos;userID&apos;=&gt;&apos;tarzan&apos;));</highlight></codeline>
</programlisting></para><para>With Jig, the syntax is similar to <ref refid="class_f3" kindref="compound">F3</ref>&apos;s template engine:-</para><para><programlisting><codeline><highlight class="normal">$db=new<sp/>DB\Jig(&apos;db/data/&apos;,DB\Jig::FORMAT_JSON);</highlight></codeline>
<codeline><highlight class="normal">$user=new<sp/>DB\Jig\Mapper($db,&apos;users&apos;);</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;load(array(&apos;@userID=?&apos;,&apos;tarzan&apos;));</highlight></codeline>
</programlisting></para><para><heading level="3">The Smart SQL ORM</heading>
</para><para>The framework automatically maps the field <computeroutput>visits</computeroutput> in our table to a data mapper property during object instantiation, i.e. `$user=new <ref refid="namespace_d_b" kindref="compound">DB</ref>($db,&apos;users&apos;);<computeroutput>. Once the object is created,</computeroutput>$user-&gt;password<computeroutput>and</computeroutput>$user-&gt;userID<computeroutput>would map to the</computeroutput>password<computeroutput>and</computeroutput>userID` fields in our table, respectively.</para><para>You can&apos;t add or delete a mapped field, or change a table&apos;s structure using the ORM. You must do this in MySQL, or whatever database engine you&apos;re using. After you make the changes in your database engine, Fat-Free will automatically synchronize the new table structure with your data mapper object when you run your application.</para><para><ref refid="class_f3" kindref="compound">F3</ref> derives the data mapper structure directly from the database schema. No guesswork involved. It understands the differences between MySQL, SQLite, MSSQL, Sybase, and PostgreSQL database engines.</para><para>SQL identifiers should not use reserved words, and should be limited to alphanumeric characters <computeroutput>A-Z</computeroutput>, <computeroutput>0-9</computeroutput>, and the underscore symbol (<computeroutput>_</computeroutput>). Column names containing spaces (or special characters) and surrounded by quotes in the data definition are not compatible with the ORM. They cannot be represented properly as PHP object properties.</para><para>Let&apos;s say we want to increment the user&apos;s number of visits and update the corresponding record in our users table, we can add the following code:-</para><para><programlisting><codeline><highlight class="normal">$user-&gt;visits++;</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;save();</highlight></codeline>
</programlisting></para><para>If we wanted to insert a record, we follow this process:-</para><para><programlisting><codeline><highlight class="normal">$user=new<sp/>DB\SQL\Mapper($db,&apos;users&apos;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>or<sp/>$user=new<sp/>DB\Mongo\Mapper($db,&apos;users&apos;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>or<sp/>$user=new<sp/>DB\Jig\Mapper($db,&apos;users&apos;);</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;userID=&apos;jane&apos;;</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;password=md5(&apos;secret&apos;);</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;visits=0;</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;save();</highlight></codeline>
</programlisting></para><para>We still use the same <computeroutput>save()</computeroutput> method. But how does <ref refid="class_f3" kindref="compound">F3</ref> know when a record should be inserted or updated? At the time a data mapper object is auto-hydrated by a record retrieval, the framework keeps track of the record&apos;s primary keys (or <computeroutput>_id</computeroutput>, in the case of MongoDB and Jig) - so it knows which record should be updated or deleted - even when the values of the primary keys are changed. A programmatically-hydrated data mapper - the values of which were not retrieved from the database, but populated by the application - will not have any memory of previous values in its primary keys. The same applies to MongoDB and Jig, but using object <computeroutput>_id</computeroutput> as reference. So, when we instantiated the <computeroutput>$user</computeroutput> object above and populated its properties with values from our program - without at all retrieving a record from the user table, <ref refid="class_f3" kindref="compound">F3</ref> knows that it should insert this record.</para><para>A mapper object will not be empty after a <computeroutput>save()</computeroutput>. If you wish to add a new record to your database, you must first dehydrate the mapper:-</para><para><programlisting><codeline><highlight class="normal">$user-&gt;reset();</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;userID=&apos;cheetah&apos;;</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;password=md5(&apos;unknown&apos;);</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;save();</highlight></codeline>
</programlisting></para><para>Calling <computeroutput>save()</computeroutput> a second time without invoking <computeroutput>reset()</computeroutput> will simply update the record currently pointed to by the mapper.</para><para><heading level="3">Caveat for SQL Tables</heading>
</para><para>Although the issue of having primary keys in all tables in your database is argumentative, <ref refid="class_f3" kindref="compound">F3</ref> does not stop you from creating a data mapper object that communicates with a table containing no primary keys. The only drawback is: you can&apos;t delete or update a mapped record because there&apos;s absolutely no way for <ref refid="class_f3" kindref="compound">F3</ref> to determine which record you&apos;re referring to plus the fact that positional references are not reliable. Row IDs are not portable across different SQL engines and may not be returned by the PHP database driver.</para><para>To remove a mapped record from our table, invoke the <computeroutput>erase()</computeroutput> method on an auto-hydrated data mapper. For example:-</para><para><programlisting><codeline><highlight class="normal">$user=new<sp/>DB\SQL\Mapper($db,&apos;users&apos;);</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;load(array(&apos;userID=?<sp/>AND<sp/>password=?&apos;,&apos;cheetah&apos;,&apos;ch1mp&apos;));</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;erase();</highlight></codeline>
</programlisting></para><para>Jig&apos;s query syntax would be slightly similar:-</para><para><programlisting><codeline><highlight class="normal">$user=new<sp/>DB\Jig\Mapper($db,&apos;users&apos;);</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;load(array(&apos;@userID=?<sp/>AND<sp/>@password=?&apos;,&apos;cheetah&apos;,&apos;chimp&apos;));</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;erase();</highlight></codeline>
</programlisting></para><para>And the MongoDB equivalent would be:-</para><para><programlisting><codeline><highlight class="normal">$user=new<sp/>DB\Mongo\Mapper($db,&apos;users&apos;);</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;load(array(&apos;userID&apos;=&gt;&apos;cheetah&apos;,&apos;password&apos;=&gt;&apos;chimp&apos;));</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;erase();</highlight></codeline>
</programlisting></para><para><heading level="3">The Weather Report</heading>
</para><para>To find out whether our data mapper was hydrated or not:-</para><para><programlisting><codeline><highlight class="normal">if<sp/>($user-&gt;dry())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>echo<sp/>&apos;No<sp/>record<sp/>matching<sp/>criteria&apos;;</highlight></codeline>
</programlisting></para><para><heading level="3">Beyond CRUD</heading>
</para><para>We&apos;ve covered the CRUD handlers. There are some extra methods that you might find useful:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;set(&apos;user&apos;,new<sp/>DB\SQL\Mapper($db,&apos;users&apos;));</highlight></codeline>
<codeline><highlight class="normal">$f3-&gt;get(&apos;user&apos;)-&gt;copyFrom(&apos;POST&apos;);</highlight></codeline>
<codeline><highlight class="normal">$f3-&gt;get(&apos;user&apos;)-&gt;save();</highlight></codeline>
</programlisting></para><para>Notice that we can also use Fat-Free variables as containers for mapper objects. The <computeroutput>copyFrom()</computeroutput> method hydrates the mapper object with elements from a framework array variable, the array keys of which must have names identical to the mapper object properties, which in turn correspond to the record&apos;s field names. So, when a <ref refid="class_web" kindref="compound">Web</ref> form is submitted (assuming the HTML name attribute is set to <computeroutput>userID</computeroutput>), the contents of that input field is transferred to `$_POST[&apos;userID&apos;]<computeroutput>, duplicated by <ref refid="class_f3" kindref="compound">F3</ref> in its</computeroutput>POST.userID&lt;tt&gt;variable, and saved to the mapped field$user-&gt;userID` in the database. The process becomes very simple if they all have identically-named elements. Consistency in array keys, i.e. template token names, framework variable names and field names is key :)</para><para>On the other hand, if we wanted to retrieve a record and copy the field values to a framework variable for later use, like template rendering:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;set(&apos;user&apos;,new<sp/>DB\SQL\Mapper($db,&apos;users&apos;));</highlight></codeline>
<codeline><highlight class="normal">$f3-&gt;get(&apos;user&apos;)-&gt;load(array(&apos;userID=?&apos;,&apos;jane&apos;));</highlight></codeline>
<codeline><highlight class="normal">$f3-&gt;get(&apos;user&apos;)-&gt;copyTo(&apos;POST&apos;);</highlight></codeline>
</programlisting></para><para>We can then assign {{ .userID }} to the same input field&apos;s value attribute. To sum up, the HTML input field will look like this:-</para><para><programlisting><codeline><highlight class="normal">&lt;input<sp/>type=&quot;text&quot;<sp/>name=&quot;userID&quot;<sp/>value=&quot;{{<sp/>@POST.userID<sp/>}}&quot;/&gt;</highlight></codeline>
</programlisting></para><para>The <computeroutput>save()</computeroutput>, <computeroutput>update()</computeroutput>, <computeroutput>copyFrom()</computeroutput> data mapper methods and the parameterized variants of <computeroutput>load()</computeroutput> and <computeroutput>erase()</computeroutput> are safe from SQL injection.</para><para><heading level="3">Navigation and Pagination</heading>
</para><para>By default, a data mapper&apos;s <computeroutput>load()</computeroutput> method retrieves only the first record that matches the specified criteria. If you have more than one that meets the same condition as the first record loaded, you can use the <computeroutput>skip()</computeroutput> method for navigation:-</para><para><programlisting><codeline><highlight class="normal">$user=new<sp/>DB\SQL\Mapper($db,&apos;users&apos;);</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;load(&apos;visits&gt;3&apos;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Rewritten<sp/>as<sp/>a<sp/>parameterized<sp/>query</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;load(array(&apos;visits&gt;?&apos;,3));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>For<sp/>MongoDB<sp/>users:-</highlight></codeline>
<codeline><highlight class="normal">//<sp/>$user=new<sp/>DB\Mongo\Mapper($db,&apos;users&apos;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>$user-&gt;load(array(&apos;visits&apos;=&gt;array(&apos;$gt&apos;=&gt;3)));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>If<sp/>you<sp/>prefer<sp/>Jig:-</highlight></codeline>
<codeline><highlight class="normal">//<sp/>$user=new<sp/>DB\Jig\Mapper($db,&apos;users&apos;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>$user-&gt;load(&apos;@visits&gt;?&apos;,3);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Display<sp/>the<sp/>userID<sp/>of<sp/>the<sp/>first<sp/>record<sp/>that<sp/>matches<sp/>the<sp/>criteria</highlight></codeline>
<codeline><highlight class="normal">echo<sp/>$user-&gt;userID;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Go<sp/>to<sp/>the<sp/>next<sp/>record<sp/>that<sp/>matches<sp/>the<sp/>same<sp/>criteria</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;skip();<sp/>//<sp/>Same<sp/>as<sp/>$user-&gt;skip(1);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Back<sp/>to<sp/>the<sp/>first<sp/>record</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;skip(-1);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Move<sp/>three<sp/>records<sp/>forward</highlight></codeline>
<codeline><highlight class="normal">$user-&gt;skip(3);</highlight></codeline>
</programlisting></para><para>You may use <computeroutput>$user-&gt;next()</computeroutput> as a substitute for <computeroutput>$user-&gt;skip()</computeroutput>, and <computeroutput>$user-&gt;prev()</computeroutput> if you think it gives more meaning to <computeroutput>$user-&gt;skip(-1)</computeroutput>.</para><para>Use the <computeroutput>dry()</computeroutput> method to check if you&apos;ve maneuvered beyond the limits of the result set. <computeroutput>dry()</computeroutput> will return TRUE if you try <computeroutput>skip(-1)</computeroutput> on the first record. It will also return TRUE if you <computeroutput>skip(1)</computeroutput> on the last record that meets the retrieval criteria.</para><para>The <computeroutput>load()</computeroutput> method accepts a second argument: an array of options containing key-value pairs such as:-</para><para><programlisting><codeline><highlight class="normal">$user-&gt;load(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array(&apos;visits&gt;?&apos;,3),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;order&apos;=&gt;&apos;userID<sp/>DESC&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;offset&apos;=&gt;5,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;limit&apos;=&gt;3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>If you&apos;re using MySQL, the query translates to:-</para><para><programlisting><codeline><highlight class="normal">SELECT<sp/>*<sp/>FROM<sp/>users</highlight></codeline>
<codeline><highlight class="normal">WHERE<sp/>visits&gt;3</highlight></codeline>
<codeline><highlight class="normal">ORDER<sp/>BY<sp/>userID<sp/>DESC</highlight></codeline>
<codeline><highlight class="normal">LIMIT<sp/>3<sp/>OFFSET<sp/>5;</highlight></codeline>
</programlisting></para><para>This is one way of presenting data in small chunks. Here&apos;s another way of paginating results:-</para><para><programlisting><codeline><highlight class="normal">$page=$user-&gt;paginate(2,5,array(&apos;visits&gt;?&apos;,3));</highlight></codeline>
</programlisting></para><para>In the above scenario, <ref refid="class_f3" kindref="compound">F3</ref> will retrieve records that match the criteria <computeroutput>&apos;visits&gt;3&apos;</computeroutput>. It will then limit the results to 5 records (per page) starting at page offset 2 (0-based). The framework will return an array consisting of the following elements:-</para><para><programlisting><codeline><highlight class="normal">[subset]<sp/>array<sp/>of<sp/>mapper<sp/>objects<sp/>that<sp/>match<sp/>the<sp/>criteria</highlight></codeline>
<codeline><highlight class="normal">[count]<sp/>number<sp/>of<sp/>subsets<sp/>available</highlight></codeline>
<codeline><highlight class="normal">[pos]<sp/>actual<sp/>subset<sp/>position</highlight></codeline>
</programlisting></para><para>The actual subset position returned will be NULL if the first argument of <computeroutput>paginate()</computeroutput> is a negative number or exceeds the number of subsets found.</para><para><heading level="3">Virtual Fields</heading>
</para><para>There are instances when you need to retrieve a computed value of a field, or a cross-referenced value from another table. Enter virtual fields. The SQL mini-ORM allows you to work on data derived from existing fields.</para><para>Suppose we have the following table defined as:-</para><para><programlisting><codeline><highlight class="normal">CREATE<sp/>TABLE<sp/>products</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>productID<sp/>VARCHAR(30),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>description<sp/>VARCHAR(255),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>supplierID<sp/>VARCHAR(30),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unitprice<sp/>DECIMAL(10,2),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>quantity<sp/>INT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PRIMARY<sp/>KEY(productID)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>No <computeroutput>totalprice</computeroutput> field exists, so we can tell the framework to request from the database engine the arithmetic product of the two fields:-</para><para><programlisting><codeline><highlight class="normal">$item=new<sp/>DB\SQL\Mapper($db,&apos;products&apos;);</highlight></codeline>
<codeline><highlight class="normal">$item-&gt;totalprice=&apos;unitprice*quantity&apos;;</highlight></codeline>
<codeline><highlight class="normal">$item-&gt;load(array(&apos;productID=:pid&apos;,&apos;:pid&apos;=&gt;&apos;apple&apos;));</highlight></codeline>
<codeline><highlight class="normal">echo<sp/>$item-&gt;totalprice;</highlight></codeline>
</programlisting></para><para>The above code snippet defines a virtual field called <computeroutput>totalprice</computeroutput> which is computed by multiplying <computeroutput>unitprice</computeroutput> by the <computeroutput>quantity</computeroutput>. The SQL mapper saves that rule/formula, so when the time comes to retrieve the record from the database, we can use the virtual field like a regular mapped field.</para><para>You can have more complex virtual fields:-</para><para><programlisting><codeline><highlight class="normal">$item-&gt;mostNumber=&apos;MAX(quantity)&apos;;</highlight></codeline>
<codeline><highlight class="normal">$item-&gt;load();</highlight></codeline>
<codeline><highlight class="normal">echo<sp/>$item-&gt;mostNumber;</highlight></codeline>
</programlisting></para><para>This time the framework retrieves the product with the highest quantity (notice the <computeroutput>load()</computeroutput> method does not define any criteria, so all records in the table will be processed). Of course, the virtual field <computeroutput>mostNumber</computeroutput> will still give you the right figure if you wish to limit the expression to a specific group of records that match a specified criteria.</para><para>You can also derive a value from another table:-</para><para><programlisting><codeline><highlight class="normal">$item-&gt;supplierName=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;SELECT<sp/>name<sp/>FROM<sp/>suppliers<sp/>&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;WHERE<sp/>products.supplierID=suppliers.supplierID&apos;;</highlight></codeline>
<codeline><highlight class="normal">$item-&gt;load();</highlight></codeline>
<codeline><highlight class="normal">echo<sp/>$item-&gt;supplierName;</highlight></codeline>
</programlisting></para><para>Every time you load a record from the products table, the ORM cross-references the <computeroutput>supplerID</computeroutput> in the <computeroutput>products</computeroutput> table with the <computeroutput>supplierID</computeroutput> in the <computeroutput>suppliers</computeroutput> table.</para><para>To destroy a virtual field, use <computeroutput>unset($item-&gt;totalPrice);</computeroutput>. The <computeroutput>isset($item-&gt;totalPrice)</computeroutput> expression returns TRUE if the <computeroutput>totalPrice</computeroutput> virtual field was defined, or FALSE if otherwise.</para><para>Remember that a virtual field must be defined prior to data retrieval. The ORM does not perform the actual computation, nor the derivation of results from another table. It is the database engine that does all the hard work.</para><para><heading level="3">Seek and You Shall Find</heading>
</para><para>If you have no need for record-by-record navigation, you can retrieve an entire batch of records in one shot:-</para><para><programlisting><codeline><highlight class="normal">$frequentUsers=$user-&gt;find(array(&apos;visits&gt;?&apos;,3),array(&apos;order&apos;=&gt;&apos;userID&apos;));</highlight></codeline>
</programlisting></para><para>Jig mapper&apos;s query syntax has a slight resemblance:-</para><para><programlisting><codeline><highlight class="normal">$frequentUsers=$user-&gt;find(array(&apos;@visits&gt;?&apos;,3),array(&apos;order&apos;=&gt;&apos;userID&apos;));</highlight></codeline>
</programlisting></para><para>The equivalent code using the MongoDB mapper:-</para><para><programlisting><codeline><highlight class="normal">$frequentUsers=$user-&gt;find(array(&apos;visits&apos;=&gt;array(&apos;$gt&apos;=&gt;3)),array(&apos;userID&apos;=&gt;1));</highlight></codeline>
</programlisting></para><para>The <computeroutput>find()</computeroutput> method searches the <computeroutput>users</computeroutput> table for records that match the criteria, sorts the result by <computeroutput>userID</computeroutput> and returns the result as an array of mapper objects. `find(&apos;visits&gt;3&apos;)<computeroutput>is different from</computeroutput>load(&apos;visits&gt;3&apos;)<computeroutput>. The latter refers to the current</computeroutput>$user<computeroutput>object.</computeroutput>find()<computeroutput>does not have any effect on</computeroutput>skip()`.</para><para><bold>Important:</bold> Declaring an empty condition, NULL, or a zero-length string as the first argument of <computeroutput>find()</computeroutput> or <computeroutput>load()</computeroutput> will retrieve all records. Be sure you know what you&apos;re doing - you might exceed PHP&apos;s memory_limit on large tables or collections.</para><para>The <computeroutput>find()</computeroutput> method has the following syntax:-</para><para><programlisting><codeline><highlight class="normal">find(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>$criteria,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;group&apos;=&gt;&apos;foo&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;order&apos;=&gt;&apos;foo,bar&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;limit&apos;=&gt;5,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;offset&apos;=&gt;0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>find() returns an array of objects. Each object is a mapper to a record that matches the specified criteria.:-</para><para><programlisting><codeline><highlight class="normal">$place=new<sp/>DB\SQL\Mapper($db,&apos;places&apos;);</highlight></codeline>
<codeline><highlight class="normal">$list=$place-&gt;find(&apos;state=&quot;New<sp/>York&quot;&apos;);</highlight></codeline>
<codeline><highlight class="normal">foreach<sp/>($list<sp/>as<sp/>$obj)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>echo<sp/>$obj-&gt;city.&apos;,<sp/>&apos;.$obj-&gt;country;</highlight></codeline>
</programlisting></para><para>If you need to convert a mapper object to an associative array, use the <computeroutput>cast()</computeroutput> method:-</para><para><programlisting><codeline><highlight class="normal">$array=$place-&gt;cast();</highlight></codeline>
<codeline><highlight class="normal">echo<sp/>$array[&apos;city&apos;].&apos;,<sp/>&apos;.$array[&apos;country&apos;];</highlight></codeline>
</programlisting></para><para>To retrieve the number of records in a table that match a certain condition, use the <computeroutput>count()</computeroutput> method.</para><para><programlisting><codeline><highlight class="normal">if<sp/>(!$user-&gt;count(array(&apos;visits&gt;?&apos;,10)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>echo<sp/>&apos;We<sp/>need<sp/>a<sp/>better<sp/>ad<sp/>campaign!&apos;;</highlight></codeline>
</programlisting></para><para>There&apos;s also a <computeroutput>select()</computeroutput> method that&apos;s similar to <computeroutput>find()</computeroutput> but provides more fine-grained control over fields returned. It has a SQL-like syntax:-</para><para><programlisting><codeline><highlight class="normal">select(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;foo,<sp/>bar,<sp/>MIN(baz)<sp/>AS<sp/>lowest&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;foo<sp/>&gt;<sp/>?&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;group&apos;=&gt;&apos;foo,<sp/>bar&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;order&apos;=&gt;&apos;baz<sp/>ASC&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;limit&apos;=&gt;5,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;offset&apos;=&gt;3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>Much like the <computeroutput>find()</computeroutput> method, <computeroutput>select()</computeroutput> does not alter the mapper object&apos;s contents. It only serves as a convenience method for querying a mapped table. The return value of both methods is an array of mapper objects. Using <computeroutput>dry()</computeroutput> to determine whether a record was found by an of these methods is inappropriate. If no records match the <computeroutput>find()</computeroutput> or <computeroutput>select()</computeroutput> criteria, the return value is an empty array.</para><para><heading level="3">Profiling</heading>
</para><para>If you ever want to find out which SQL statements issued directly by your application (or indirectly thru mapper objects) are causing performance bottlenecks, you can do so with a simple:-</para><para><programlisting><codeline><highlight class="normal">echo<sp/>$db-&gt;log();</highlight></codeline>
</programlisting></para><para><ref refid="class_f3" kindref="compound">F3</ref> keeps track of all commands issued to the underlying SQL database driver, as well as the time it takes for each statement to complete - just the right information you need to tweak application performance.</para><para><heading level="3">Sometimes It Just Ain&apos;t Enough</heading>
</para><para>In most cases, you can live by the comforts given by the data mapper methods we&apos;ve discussed so far. If you need the framework to do some heavy-duty work, you can extend the SQL mapper by declaring your own classes with custom methods - but you can&apos;t avoid getting your hands greasy on some hardcore SQL:-</para><para><programlisting><codeline><highlight class="normal">class<sp/>Vendor<sp/>extends<sp/>DB\SQL\Mapper<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Instantiate<sp/>mapper</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>__construct(DB\SQL<sp/>$db)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>This<sp/>is<sp/>where<sp/>the<sp/>mapper<sp/>and<sp/>DB<sp/>structure<sp/>synchronization<sp/>occurs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent::__construct($db,&apos;vendors&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Specialized<sp/>query</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>listByCity()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>$this-&gt;select(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;vendorID,name,city&apos;,array(&apos;order&apos;=&gt;&apos;city<sp/>DESC&apos;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>We<sp/>could<sp/>have<sp/>done<sp/>the<sp/>the<sp/>same<sp/>thing<sp/>with<sp/>plain<sp/>vanilla<sp/>SQL:-</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>$this-&gt;db-&gt;exec(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;SELECT<sp/>vendorID,name,city<sp/>FROM<sp/>vendors<sp/>&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;ORDER<sp/>BY<sp/>city<sp/>DESC;&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">$vendor=new<sp/>Vendor;</highlight></codeline>
<codeline><highlight class="normal">$vendor-&gt;listByCity();</highlight></codeline>
</programlisting></para><para>Extending the data mappers in this fashion is an easy way to construct your application&apos;s DB-related models.</para><para><heading level="3">Pros and Cons</heading>
</para><para>If you&apos;re handy with SQL, you&apos;d probably say: everything in the ORM can be handled with old-school SQL queries. Indeed. We can do without the additional event listeners by using database triggers and stored procedures. We can accomplish relational queries with joined tables. The ORM is just unnecessary overhead. But the point is - data mappers give you the added functionality of using objects to represent database entities. As a developer, you can write code faster and be more productive. The resulting program will be cleaner, if not shorter. But you&apos;ll have to weigh the benefits against the compromise in speed - specially when handling large and complex data stores. Remember, all ORMS - no matter how thin they are - will always be just another abstraction layer. They still have to pass the work to the underlying SQL engines.</para><para>By design, <ref refid="class_f3" kindref="compound">F3</ref>&apos;s ORMs do not provide methods for directly connecting objects to each other, i.e. SQL joins - because this opens up a can of worms. It makes your application more complex than it should be, and there&apos;s the tendency of objects thru eager or lazy fetching techniques to be deadlocked and even out of sync due to object inheritance and polymorphism (impedance mismatch) with the database entities they&apos;re mapped to. There are indirect ways of doing it in the SQL mapper, using virtual fields - but you&apos;ll have to do this programmatically and at your own risk.</para><para>If you are tempted to apply &quot;pure&quot; OOP concepts in your application to represent all your data (because &quot;everything is an object&quot;), keep in mind that data almost always lives longer than the application. Your program may already be outdated long before the data has lost its value. Don&apos;t add another layer of complexity in your program by using intertwined objects and classes that deviate too much from the schema and physical structure of the data.</para><para>Before you weave multiple objects together in your application to manipulate the underlying tables in your database, think about this: creating views to represent relationships and triggers to define object behavior in the database engine are more efficient. Relational database engines are designed to handle views, joined tables and triggers. They are not dumb data stores. Tables joined in a view will appear as a single table, and Fat-Free can auto-map a view just as well as a regular table. Replicating JOINs as relational objects in PHP is slower compared to the database engine&apos;s machine code, relational algebra and optimization logic. Besides, joining tables repeatedly in our application is a sure sign that the database design needs to be audited, and views considered an integral part of data retrieval. If a table cross-references data from another table frequently, consider normalizing your structures or creating a view instead. Then create a mapper object to auto-map that view. It&apos;s faster and requires less effort.</para><para>Consider this SQL view created inside your database engine:-</para><para><programlisting><codeline><highlight class="normal">CREATE<sp/>VIEW<sp/>combined<sp/>AS</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SELECT</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projects.project_id<sp/>AS<sp/>project,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>users.name<sp/>AS<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>FROM<sp/>projects</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>LEFT<sp/>OUTER<sp/>JOIN<sp/>users<sp/>ON</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projects.project_id=users.project_id<sp/>AND</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projects.user_id=users.user_id;</highlight></codeline>
</programlisting></para><para>Your application code becomes simple because it does not have to maintain two mapper objects (one for the projects table and another for users) just to retrieve data from two joined tables:-</para><para><programlisting><codeline><highlight class="normal">$combined=new<sp/>DB\SQL\Mapper($db,&apos;combined&apos;);</highlight></codeline>
<codeline><highlight class="normal">$combined-&gt;load(array(&apos;project=?&apos;,123));</highlight></codeline>
<codeline><highlight class="normal">echo<sp/>$combined-&gt;name;</highlight></codeline>
</programlisting></para><para>Tip:Use the tools as they&apos;re designed for. Fat-Free already has an easy-to-use SQL helper. Use it if you need a bigger hammer :) Try to seek a balance between convenience and performance. SQL will always be your fallback if you&apos;re working on complex and legacy data structures.</para><para><heading level="2">Plug-Ins</heading>
</para><para><heading level="3">About <ref refid="class_f3" kindref="compound">F3</ref> Plug-ins</heading>
</para><para>Plug-ins are nothing more than autoloaded classes that use framework built-ins to extend <ref refid="class_f3" kindref="compound">F3</ref>&apos;s features and functionality. If you&apos;d like to contribute, leave a note at the Fat-Free Discussion Area hosted by Google Groups or tell us about it in the FreeNode <computeroutput>#fatfree</computeroutput> IRC channel. Someone else might be involved in a similar project. The framework community will appreciate it a lot if we unify our efforts.</para><para><heading level="3">CAPTCHA Images</heading>
</para><para>There might be instances when you want to make your forms more secure against spam bots and malicious automated scripts. <ref refid="class_f3" kindref="compound">F3</ref> provides a <computeroutput>captcha()</computeroutput> method to generate images with random text that are designed to be recognizable only by humans.</para><para><programlisting><codeline><highlight class="normal">$img<sp/>=<sp/>new<sp/>Image();</highlight></codeline>
<codeline><highlight class="normal">$img-&gt;captcha(&apos;fonts/CoolFont.ttf&apos;,16,5,&apos;SESSION.captcha_code&apos;);</highlight></codeline>
<codeline><highlight class="normal">$img-&gt;render();</highlight></codeline>
</programlisting></para><para>This example generates an random image based on your desired TrueType font. The <computeroutput>fonts/</computeroutput> folder is a subfolder within application&apos;s <computeroutput>UI</computeroutput> path. The second parameter indicates the font size, and the third argument defines the number of hexadecimal characters to generate.</para><para>The last argument represents an <ref refid="class_f3" kindref="compound">F3</ref> variable name. This is where <ref refid="class_f3" kindref="compound">F3</ref> will store the string equivalent of the CAPTCHA image. To make the string reload-safe, we specified a session variable:- <computeroutput>SESSION.captcha_code</computeroutput> which maps to `$_SESSION[&apos;captcha_code&apos;]`, which you can use later to verify whether the input element in the form submitted matches this string.</para><para><heading level="3">Grabbing Data from Another Site</heading>
</para><para>We&apos;ve covered almost every feature available in the framework to run a stand-alone <ref refid="class_web" kindref="compound">Web</ref> server. For most applications, these features will serve you quite well. But what do you do if your application needs data from another <ref refid="class_web" kindref="compound">Web</ref> server on the network? <ref refid="class_f3" kindref="compound">F3</ref> has the <ref refid="class_web" kindref="compound">Web</ref> plugin to help you in this situation:-</para><para><programlisting><codeline><highlight class="normal">$web=new<sp/>Web;</highlight></codeline>
<codeline><highlight class="normal">$request=$web-&gt;request(&apos;http://www.google.com/&apos;);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>another<sp/>way<sp/>to<sp/>do<sp/>it:-</highlight></codeline>
<codeline><highlight class="normal">$request=Web::instance()-&gt;request(&apos;http://www.google.com/&apos;);</highlight></codeline>
</programlisting></para><para>This simple example sends an HTTP request to the page located at www.google.com and stores it in the <computeroutput>$request</computeroutput> PHP variable. The <computeroutput>request()</computeroutput> method returns an array containing the HTTP response such that `$request[&apos;headers&apos;]<computeroutput>and</computeroutput>$request[&apos;body&apos;]` represent the response headers and body, respectively. We could have saved the contents using the F3::set command, or echo&apos;ed the output directly to our browser. Retrieving another HTML page on the net may not have any practical purpose. But it can be particularly useful in ReSTful applications, like querying a CouchDB server.</para><para><programlisting><codeline><highlight class="normal">$host=&apos;localhost:5984&apos;;</highlight></codeline>
<codeline><highlight class="normal">$web-&gt;request($host.&apos;/_all_dbs&apos;),</highlight></codeline>
<codeline><highlight class="normal">$web-&gt;request($host.&apos;/testdb/&apos;,array(&apos;method&apos;=&gt;&apos;PUT&apos;));</highlight></codeline>
</programlisting></para><para>You may have noticed that you can pass an array of additional options to the <computeroutput>request()</computeroutput> method:-</para><para><programlisting><codeline><highlight class="normal">$web-&gt;request(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;https://www.example.com:443?&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>http_build_query(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;key1&apos;=&gt;&apos;value1&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;key2&apos;=&gt;&apos;value2&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;headers&apos;=&gt;array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;Accept:<sp/>text/html,application/xhtml+xml,application/xml&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;Accept-Language:<sp/>en-us&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;follow_location&apos;=&gt;FALSE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;max_redirects&apos;=&gt;30,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;ignore_errors&apos;=&gt;TRUE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>If the framework variable <computeroutput>CACHE</computeroutput> is enabled, and if the remote server instructs your application to cache the response to the HTTP request, <ref refid="class_f3" kindref="compound">F3</ref> will comply with the request and retrieve the cached response each time the framework receives a similar request from your application, thus behaving like a browser.</para><para>Fat-Free will use whatever means are available on your <ref refid="class_web" kindref="compound">Web</ref> server for the <computeroutput>request()</computeroutput> method to run: PHP stream wrappers (<computeroutput>allow_url_fopen</computeroutput>), cURL module, or low-level sockets.</para><para><heading level="3">Handling File Downloads</heading>
</para><para><ref refid="class_f3" kindref="compound">F3</ref> has a utility for sending files to an HTTP client, i.e. fulfilling download requests. You can use it to hide the real path to your download files. This adds some layer of security because users won&apos;t be able to download files if they don&apos;t know the file names and their locations. Here&apos;s how it&apos;s done:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;route(&apos;GET<sp/>/downloads/@filename&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function($f3,$args)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>send()<sp/>method<sp/>returns<sp/>FALSE<sp/>if<sp/>file<sp/>doesn&apos;t<sp/>exist</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!Web::instance()-&gt;send(&apos;/real/path/&apos;.$args[&apos;filename&apos;]))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Generate<sp/>an<sp/>HTTP<sp/>404</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>$f3-&gt;error(404);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para><heading level="3">Remoting and Distributed Applications</heading>
</para><para>The <computeroutput>request()</computeroutput> method can also be used in complex SOAP or XML-RPC applications, if you find the need for another <ref refid="class_web" kindref="compound">Web</ref> server to process data on your computer&apos;s behalf - thus harnessing the power of distributing computing. W3Schools.com has an excellent tutorial on SOAP. On the other hand, TutorialsPoint.com gives a nice overview of XML-RPC.</para><para><heading level="2">Optimization</heading>
</para><para><heading level="3"><ref refid="class_cache" kindref="compound">Cache</ref> Engine</heading>
</para><para>Caching static <ref refid="class_web" kindref="compound">Web</ref> pages - so the code in some route handlers can be skipped and templates don&apos;t have to be reprocessed - is one way of reducing your <ref refid="class_web" kindref="compound">Web</ref> server&apos;s work load so it can focus on other tasks. You can activate the framework&apos;s cache engine by providing a third argument to the <computeroutput>$f3-&gt;route()</computeroutput> method. Just specify the number of seconds before a cached <ref refid="class_web" kindref="compound">Web</ref> page expires:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;route(&apos;GET<sp/>/my_page&apos;,&apos;App-&gt;method&apos;,60);</highlight></codeline>
</programlisting></para><para>Here&apos;s how it works. In this example, when <ref refid="class_f3" kindref="compound">F3</ref> detects that the URL <computeroutput>/my_page</computeroutput> is accessed for the first time, it executes the route handler represented by the second argument and saves all browser output to the framework&apos;s built-in cache (server-side). A similar instruction is automatically sent to the user&apos;s <ref refid="class_web" kindref="compound">Web</ref> browser (client-side), so that instead of sending an identical request to the server within the 60-second period, the browser can just retrieve the page locally. The framework uses the cache for an entirely different purpose - serving framework-cached data to other users asking for the same <ref refid="class_web" kindref="compound">Web</ref> page within the 60-second time frame. It skips execution of the route handler and serves the previously-saved page directly from disk. When someone tries to access the same URL after the 60-second timer has lapsed, <ref refid="class_f3" kindref="compound">F3</ref> will refresh the cache with a new copy.</para><para><ref refid="class_web" kindref="compound">Web</ref> pages with static data are the most likely candidates for caching. Fat-Free will not cache a <ref refid="class_web" kindref="compound">Web</ref> page at a specified URL if the third argument in the <computeroutput>$f3-&gt;route()</computeroutput> method is zero or unspecified. <ref refid="class_f3" kindref="compound">F3</ref> conforms to the HTTP specifications: only GET and HEAD requests can be cached.</para><para>Here&apos;s an important point to consider when designing your application. Don&apos;t cache <ref refid="class_web" kindref="compound">Web</ref> pages unless you understand the possible unwanted side-effects of the cache at the client-side. Make sure that you activate caching on <ref refid="class_web" kindref="compound">Web</ref> pages that have nothing to do with the user&apos;s session state.</para><para>For example, you designed your site in such a way that all your <ref refid="class_web" kindref="compound">Web</ref> pages have the menu options: <computeroutput>&quot;Home&quot;</computeroutput>, <computeroutput>&quot;About Us&quot;</computeroutput>, and <computeroutput>&quot;Login&quot;</computeroutput>, displayed when a user is not logged into your application. You also want the menu options to change to: <computeroutput>&quot;Home&quot;</computeroutput>, <computeroutput>&quot;About Us&quot;</computeroutput>, and <computeroutput>&quot;Logout&quot;</computeroutput>, once the user has logged in. If you instructed Fat-Free to cache the contents of <computeroutput>&quot;About Us&quot;</computeroutput> page (which includes the menu options), it does so and also sends the same instruction to the HTTP client. Regardless of the user&apos;s session state, i.e. logged in or logged out, the user&apos;s browser will take a snapshot of the page at the session state it was in. Future requests by the user for the <computeroutput>&quot;About Us&quot;</computeroutput> page before the cache timeout expires will display the same menu options available at that time the page was initially saved. Now, a user may have already logged in, but the menu options are still the same as if no such event occurred. That&apos;s not the kind of behavior we want from our application.</para><para>Some pointers:-</para><para><itemizedlist>
<listitem><para>Don&apos;t cache dynamic pages. It&apos;s quite obvious you don&apos;t want to cache data that changes frequently. You can, however, activate caching on pages that contain data updated on an hourly, daily or even yearly basis.For security reasons, the framework restricts cache engine usage to HTTP <computeroutput>GET</computeroutput> routes only. It will not cache submitted forms!Don&apos;t activate the cache on <ref refid="class_web" kindref="compound">Web</ref> pages that at first glance look static. In our example, the &quot;About Us&quot; content may be static, but the menu isn&apos;t.</para></listitem><listitem><para>Activate caching on pages that are available only in ONE session state. If you want to cache the <computeroutput>&quot;About Us&quot;</computeroutput> page, make sure it&apos;s available only when a user is not logged in.</para></listitem><listitem><para>If you have a RAMdisk or fast solid-state drive, configure the <computeroutput>CACHE</computeroutput> global variable so it points to that drive. This will make your application run like a Formula 1 race car.</para></listitem></itemizedlist>
</para><para><bold>Note:</bold> Don&apos;t set the timeout value to a very long period until you&apos;re ready to roll out your application, i.e. the release or production state. Changes you make to any of your PHP scripts may not have the expected effect on the displayed output if the page exists in the framework cache and the expiration period has not lapsed. If you do alter a program that generates a page affected by the cache timer and you want these changes to take effect immediately, you should clear the cache by erasing the files in the cache/ directory (or whatever path the <computeroutput>CACHE</computeroutput> global variable points to). <ref refid="class_f3" kindref="compound">F3</ref> will automatically refresh the cache if necessary. At the client-side, there&apos;s little you can do but instruct the user to clear the browser&apos;s cache or wait for the cache period to expire.</para><para>PHP needs to be set up correctly for the <ref refid="class_f3" kindref="compound">F3</ref> cache engine to work properly. Your operating system timezone should be synchronized with the date.timezone setting in the <computeroutput>php.ini</computeroutput> file.</para><para>Similar to routes, Fat-Free also allows you to cache database queries. Speed gains can be quite significant, specially when used on complex SQL statements that involve look-up of static data or database content that rarely changes. Activating the database query cache so the framework doesn&apos;t have to re-execute the SQL statements every time is as simple as adding a 3rd argument to the F3::sql command - the cache timeout. For example:-</para><para><programlisting><codeline><highlight class="normal">$db-&gt;exec(&apos;SELECT<sp/>*<sp/>from<sp/>sizes;&apos;,NULL,86400);</highlight></codeline>
</programlisting></para><para>If we expect the result of this database query to always be <computeroutput>Small</computeroutput>, <computeroutput>Medium</computeroutput>, and <computeroutput>Large</computeroutput> within a 24-hour period, we specify <computeroutput>86400</computeroutput> seconds as the 2nd argument so Fat-Free doesn&apos;t have to execute the query more than once a day. Instead, the framework will store the result in the cache, retrieve it from the cache every time a request comes in during the specified 24-hour time frame, and re-execute the query when the timer lapses.</para><para>The SQL data mapper also uses the cache engine to optimize synchronization of table structures with the objects that represent them. The default is <computeroutput>60</computeroutput> seconds. If you make any changes to a table&apos;s structure in your database engine, you&apos;ll have to wait for the cache timer to expire before seeing the effect in your application. You can change this behavior by specifying a third argument to the data mapper constructor. Set it to a high value if you don&apos;t expect to make any further changes to your table structure.</para><para><programlisting><codeline><highlight class="normal">$user=new<sp/>DB\SQL\Mapper($db,&apos;users&apos;,86400);</highlight></codeline>
</programlisting></para><para>By default, Fat-Free&apos;s cache engine is disabled. You can enable it and allow it to auto-detect APC, WinCache or XCache. If it cannot find an appropriate backend, <ref refid="class_f3" kindref="compound">F3</ref> will use the filesystem, i.e. the <computeroutput>tmp/cache/</computeroutput> folder:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;set(&apos;CACHE&apos;,TRUE);</highlight></codeline>
</programlisting></para><para>Disabling the cache is as simple as:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;set(&apos;CACHE&apos;,FALSE);</highlight></codeline>
</programlisting></para><para>If you wish to override the auto-detection feature, you can do so - as in the case of a Memcached back-end which <ref refid="class_f3" kindref="compound">F3</ref> also supports:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;set(&apos;CACHE&apos;,&apos;memcache=localhost:11211&apos;);</highlight></codeline>
</programlisting></para><para>You can also use the cache engine to store your own variables. These variables will persist between HTTP requests and remain in cache until the engine receives instructions to delete them. To save a value in the cache:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;set(&apos;var&apos;,&apos;I<sp/>want<sp/>this<sp/>value<sp/>saved&apos;,90);</highlight></codeline>
</programlisting></para><para><computeroutput>$f3-&gt;set()</computeroutput> method&apos;s third argument instructs the framework to save the variable in the cache for a 90-second duration. If your application issues a `$f3-&gt;get(&apos;var&apos;)<computeroutput>within this period, <ref refid="class_f3" kindref="compound">F3</ref> will automatically retrieve the value from cache. In like manner,</computeroutput>$f3-&gt;clear(&apos;var&apos;)<computeroutput>will purge the value from both cache and RAM. If you want to determine if a variable exists in cache,</computeroutput>$f3-&gt;exists(&apos;var&apos;)); returns one of two possible values: FALSE if the framework variable passed does not exist in cache, or an integer representing the time the variable was saved (Un*x time in seconds, with microsecond precision).</para><para><heading level="3">Keeping Javascript and CSS on a Healthy Diet</heading>
</para><para>Fat-Free also has a Javascript and CSS compressor available in the <ref refid="class_web" kindref="compound">Web</ref> plug-in. It can combine all your CSS files into one stylesheet (or Javascript files into a single script) so the number of components on a <ref refid="class_web" kindref="compound">Web</ref> page are decreased. Reducing the number of HTTP requests to your <ref refid="class_web" kindref="compound">Web</ref> server results in faster page loading. First you need to prepare your HTML template so it can take advantage of this feature. Something like:-</para><para><programlisting><codeline><highlight class="normal">&lt;link<sp/>rel=&quot;stylesheet&quot;<sp/>type=&quot;text/css&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>href=&quot;/minify/css?files=typo.css,grid.css&quot;<sp/>/&gt;</highlight></codeline>
</programlisting></para><para>Do the same with your Javascript files:-</para><para><programlisting><codeline><highlight class="normal">&lt;script<sp/>type=&quot;text/javascript&quot;<sp/>src=&quot;/minify/js?&amp;files=underscore.js&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/script&gt;</highlight></codeline>
</programlisting></para><para>Of course we need to set up a route so your application can handle the necessary call to the Fat-Free CSS/Javascript compressor:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;route(&apos;GET<sp/>/minify/@type&apos;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function($f3,$args)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>$f3-&gt;set(&apos;UI&apos;,$args[&apos;type&apos;].&apos;/&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>echo<sp/>Web::instance()-&gt;minify($_GET[&apos;files&apos;]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>3600</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>And that&apos;s all there is to it! <computeroutput>minify()</computeroutput> reads each file (<computeroutput>typo.css</computeroutput> and <computeroutput>grid.css</computeroutput> in our CSS example, <computeroutput>underscore.js</computeroutput> in our Javascript example), strips off all unnecessary whitespaces and comments, combines all of the related items as a single <ref refid="class_web" kindref="compound">Web</ref> page component, and attaches a far-future expiry date so the user&apos;s <ref refid="class_web" kindref="compound">Web</ref> browser can cache the data. It&apos;s important that the <computeroutput>PARAMS.type</computeroutput> variable base points to the correct path. Otherwise, the URL rewriting mechanism inside the compressor won&apos;t find the CSS/Javascript files.</para><para><heading level="3">Client-Side Caching</heading>
</para><para>In our examples, the framework sends a far-future expiry date to the client&apos;s <ref refid="class_web" kindref="compound">Web</ref> browser so any request for the same CSS or Javascript block will come from the user&apos;s hard drive. On the server side, <ref refid="class_f3" kindref="compound">F3</ref> will check each request and see if the CSS or Javascript blocks have already been cached. The route we specified has a cache refresh period of <computeroutput>3600</computeroutput> seconds. Additionally, if the <ref refid="class_web" kindref="compound">Web</ref> browser sends an <computeroutput>If-Modified-Since</computeroutput> request header and the framework sees the cache hasn&apos;t changed, <ref refid="class_f3" kindref="compound">F3</ref> just sends an <computeroutput>HTTP 304 Not Modified</computeroutput> response so no content is actually delivered. Without the <computeroutput>If-Modified-Since</computeroutput> header, Fat-Free renders the output from the cached file if available. Otherwise, the relevant code is executed.</para><para>Tip: If you&apos;re not modifying your Javascript/CSS files frequently (as it would be if you&apos;re using a Javascript library like jQuery, MooTools, Dojo, etc.), consider adding a cache timer to the route leading to your Javascript/CSS minify handler (3rd argument of F3::route()) so Fat-Free doesn&apos;t have compress and combine these files each time such a request is received.</para><para><heading level="3">PHP Code Acceleration</heading>
</para><para>Want to make your site run even faster? Fat-Free works best with either Alternative PHP <ref refid="class_cache" kindref="compound">Cache</ref> (APC), XCache, or WinCache. These PHP extensions boost performance of your application by optimizing your PHP scripts (including the framework code).</para><para><heading level="3">Bandwidth Throttling</heading>
</para><para>A fast application that processes all HTTP requests and responds to them at the shortest time possible is not always a good idea - specially if your bandwidth is limited or traffic on your <ref refid="class_web" kindref="compound">Web</ref> site is particularly heavy. Serving pages ASAP also makes your application vulnerable to Denial-of-Service (DOS) attacks. <ref refid="class_f3" kindref="compound">F3</ref> has a bandwidth throttling feature that allows you to control how fast your <ref refid="class_web" kindref="compound">Web</ref> pages are served. You can specify how much time it should take to process a request:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;route(&apos;/throttledpage&apos;,&apos;MyApp-&gt;handler&apos;,0,128);</highlight></codeline>
</programlisting></para><para>In this example, the framework will serve the <ref refid="class_web" kindref="compound">Web</ref> page at a rate of 128KiBps.</para><para>Bandwidth throttling at the application level can be particularly useful for login pages. Slow responses to dictionary attacks is a good way of mitigating this kind of security risk.</para><para><heading level="2">Unit Testing</heading>
</para><para><heading level="3">Bullet-Proof Code</heading>
</para><para>Robust applications are the result of comprehensive testing. Verifying that each part of your program conforms to the specifications and lives up to the expectations of the end-user means finding bugs and fixing them as early as possible in the application development cycle.</para><para>If you know little or nothing about unit testing methodologies, you&apos;re probably embedding pieces of code directly in your existing program to help you with debugging. That of course means you have to remove them once the program is running. Leftover code fragments, poor design and faulty implementation can creep up as bugs when you roll out your application later.</para><para><ref refid="class_f3" kindref="compound">F3</ref> makes it easy for you to debug programs - without getting in the way of your regular thought processes. The framework does not require you to build complex OOP classes, heavy test structures, and obtrusive procedures.</para><para>A unit (or test fixture) can be a function/method or a class. Let&apos;s have a simple example:-</para><para><programlisting><codeline><highlight class="normal">function<sp/>hello()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>&apos;Hello,<sp/>World&apos;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Save it in a file called <computeroutput>hello.php</computeroutput>. Now how do we know it really runs as expected? Let&apos;s create our test procedure:-</para><para><programlisting><codeline><highlight class="normal">$f3=require(&apos;lib/base.php&apos;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>up</highlight></codeline>
<codeline><highlight class="normal">$test=new<sp/>Test;</highlight></codeline>
<codeline><highlight class="normal">include(&apos;hello.php&apos;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>is<sp/>where<sp/>the<sp/>tests<sp/>begin</highlight></codeline>
<codeline><highlight class="normal">$test-&gt;expect(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>is_callable(&apos;hello&apos;),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;hello()<sp/>is<sp/>a<sp/>function&apos;</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Another<sp/>test</highlight></codeline>
<codeline><highlight class="normal">$hello=hello();</highlight></codeline>
<codeline><highlight class="normal">$test-&gt;expect(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>!empty($hello),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;Something<sp/>was<sp/>returned&apos;</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>test<sp/>should<sp/>succeed</highlight></codeline>
<codeline><highlight class="normal">$test-&gt;expect</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>is_string($hello),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;Return<sp/>value<sp/>is<sp/>a<sp/>string&apos;</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>test<sp/>is<sp/>bound<sp/>to<sp/>fail</highlight></codeline>
<codeline><highlight class="normal">$test-&gt;expect(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>strlen($hello)==13,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&apos;String<sp/>length<sp/>is<sp/>13&apos;</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Display<sp/>the<sp/>results;<sp/>not<sp/>MVC<sp/>but<sp/>let&apos;s<sp/>keep<sp/>it<sp/>simple</highlight></codeline>
<codeline><highlight class="normal">foreach<sp/>($test-&gt;results()<sp/>as<sp/>$result)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>echo<sp/>$result[&apos;text&apos;].&apos;&lt;br<sp/>/&gt;&apos;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>($result[&apos;status&apos;])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>echo<sp/>&apos;Pass&apos;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>echo<sp/>&apos;Fail<sp/>(&apos;.$result[&apos;source&apos;].&apos;)&apos;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>echo<sp/>&apos;&lt;br<sp/>/&gt;&apos;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Save it in a file called <computeroutput><ref refid="test_8php" kindref="compound">test.php</ref></computeroutput>. This way we can preserve the integrity of <computeroutput>hello.php</computeroutput>.</para><para>Now here&apos;s the meat of our unit testing process.</para><para><ref refid="class_f3" kindref="compound">F3</ref>&apos;s built-in <computeroutput><ref refid="class_test" kindref="compound">Test</ref></computeroutput> class keeps track of the result of each <computeroutput>expect()</computeroutput> call. The output of <computeroutput>$test-&gt;results()</computeroutput> is an array of arrays with the keys <computeroutput>text</computeroutput> (mirroring argument 2 of <computeroutput>expect()</computeroutput>), <computeroutput>status</computeroutput> (boolean representing the result of a test), and <computeroutput>source</computeroutput> (file name/line number of the specific test) to aid in debugging.</para><para>Fat-Free gives you the freedom to display test results in any way you want. You can have the output in plain text or even a nice-looking HTML template. So how do we run our unit test? If you saved <computeroutput><ref refid="test_8php" kindref="compound">test.php</ref></computeroutput> in the document root folder, you can just open your browser and specify the address <computeroutput><ulink url="http://localhost/test.php">http://localhost/test.php</ulink></computeroutput>. That&apos;s all there is to it.</para><para><heading level="3">Mocking HTTP Requests</heading>
</para><para><ref refid="class_f3" kindref="compound">F3</ref> gives you the ability to simulate HTTP requests from within your PHP program so you can test the behavior of a particular route. Here&apos;s a simple mock request:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;mock(&apos;GET<sp/>/test?foo=bar&apos;);</highlight></codeline>
</programlisting></para><para>To mock a POST request and submit a simulated HTML form:-</para><para><programlisting><codeline><highlight class="normal">$f3-&gt;mock(&apos;POST<sp/>/test&apos;,array(&apos;foo&apos;=&gt;&apos;bar&apos;));</highlight></codeline>
</programlisting></para><para><heading level="3">Expecting the Worst that can Happen</heading>
</para><para>Once you get the hang of testing the smallest units of your application, you can then move on to the bigger components, modules, and subsystems - checking along the way if the parts are correctly communicating with each other. Testing manageable chunks of code leads to more reliable programs that work as you expect, and weaves the testing process into the fabric of your development cycle. The question to ask yourself is:- Have I tested all possible scenarios? More often than not, those situations that have not been taken into consideration are the likely causes of bugs. Unit testing helps a lot in minimizing these occurrences. Even a few tests on each fixture can greatly reduce headaches. On the other hand, writing applications without unit testing at all invites trouble.</para><para><heading level="2">Quick Reference</heading>
</para><para><heading level="3">System Variables</heading>
</para><para><computeroutput>string AGENT</computeroutput></para><para><itemizedlist>
<listitem><para>Auto-detected HTTP user agent, e.g. <computeroutput>Mozilla/5.0 (Linux; Android 4.2.2; Nexus 7) AppleWebKit/537.31</computeroutput>.</para></listitem></itemizedlist>
</para><para><computeroutput>bool AJAX</computeroutput></para><para><itemizedlist>
<listitem><para><computeroutput>TRUE</computeroutput> if an XML HTTP request is detected, <computeroutput>FALSE</computeroutput> otherwise.</para></listitem></itemizedlist>
</para><para><computeroutput>string AUTOLOAD</computeroutput></para><para><itemizedlist>
<listitem><para>Search path for user-defined PHP classes that the framework will attempt to autoload at runtime. Accepts a pipe (<computeroutput>|</computeroutput>), comma (<computeroutput>,</computeroutput>), or semi-colon (<computeroutput>;</computeroutput>) as path separator.</para></listitem></itemizedlist>
</para><para><computeroutput>string BASE</computeroutput></para><para><itemizedlist>
<listitem><para>Path to the <computeroutput><ref refid="index_8php" kindref="compound">index.php</ref></computeroutput> main/front controller.</para></listitem></itemizedlist>
</para><para><computeroutput>string BODY</computeroutput></para><para><itemizedlist>
<listitem><para>HTTP request body for ReSTful post-processing.</para></listitem></itemizedlist>
</para><para><computeroutput>bool/string CACHE</computeroutput></para><para><itemizedlist>
<listitem><para><ref refid="class_cache" kindref="compound">Cache</ref> backend. Unless assigned a value like <computeroutput>&apos;memcache=localhost&apos;</computeroutput> (and the PHP memcache module is present), <ref refid="class_f3" kindref="compound">F3</ref> auto-detects the presence of APC, WinCache and XCache and uses the first available PHP module if set to TRUE. If none of these PHP modules are available, a filesystem-based backend is used (default directory: <computeroutput>tmp/cache</computeroutput>). The framework disables the cache engine if assigned a <computeroutput>FALSE</computeroutput> value.</para></listitem></itemizedlist>
</para><para><computeroutput>bool CASELESS</computeroutput></para><para><itemizedlist>
<listitem><para>Pattern matching of routes against incoming URIs is case-insensitive by default. Set to <computeroutput>FALSE</computeroutput> to make it case-sensitive.</para></listitem></itemizedlist>
</para><para><computeroutput>array COOKIE, GET, POST, REQUEST, SESSION, FILES, SERVER, ENV</computeroutput></para><para><itemizedlist>
<listitem><para>Framework equivalents of PHP globals. Variables may be used throughout an application. However, direct use in templates is not advised due to security risks.</para></listitem></itemizedlist>
</para><para><computeroutput>integer DEBUG</computeroutput></para><para><itemizedlist>
<listitem><para>Stack trace verbosity. Assign values 1 to 3 for increasing verbosity levels. Zero (0) suppresses the stack trace. This is the default value and it should be the assigned setting on a production server.</para></listitem></itemizedlist>
</para><para><computeroutput>string DNSBL</computeroutput></para><para><itemizedlist>
<listitem><para>Comma-separated list of <ulink url="http://whatismyipaddress.com/blacklist-check">DNS blacklist servers</ulink>. Framework generates a <computeroutput>403 Forbidden</computeroutput> error if the user&apos;s IPv4 address is listed on the specified server(s).</para></listitem></itemizedlist>
</para><para><computeroutput>array DIACRITICS</computeroutput></para><para><itemizedlist>
<listitem><para>Key-value pairs for foreign-to-ASCII character translations.</para></listitem></itemizedlist>
</para><para><computeroutput>string ENCODING</computeroutput></para><para><itemizedlist>
<listitem><para>Character set used for document encoding. Default value is <computeroutput>UTF-8</computeroutput>.</para></listitem></itemizedlist>
</para><para><computeroutput>array ERROR</computeroutput></para><para><itemizedlist>
<listitem><para>Information about the last HTTP error that occurred. <computeroutput>ERROR.code</computeroutput> is the HTTP status code. <computeroutput>ERROR.status</computeroutput> contains a brief description of the error. <computeroutput>ERROR.text</computeroutput> provides more detail. For HTTP 500 errors, use <computeroutput>ERROR.trace</computeroutput> to retrieve the stack trace.</para></listitem></itemizedlist>
</para><para><computeroutput>bool ESCAPE</computeroutput></para><para><itemizedlist>
<listitem><para>Used to enable/disable auto-escaping.</para></listitem></itemizedlist>
</para><para><computeroutput>string EXEMPT</computeroutput></para><para><itemizedlist>
<listitem><para>Comma-separated list of IPv4 addresses exempt from DNSBL lookups.</para></listitem></itemizedlist>
</para><para><computeroutput>string FALLBACK</computeroutput></para><para><itemizedlist>
<listitem><para>Language (and dictionary) to use if no translation is available.</para></listitem></itemizedlist>
</para><para><computeroutput>bool HALT</computeroutput></para><para><itemizedlist>
<listitem><para>If TRUE (default), framework stops execution after a non-fatal error is detected.</para></listitem></itemizedlist>
</para><para><computeroutput>array HEADERS</computeroutput></para><para><itemizedlist>
<listitem><para>HTTP request headers received by the server.</para></listitem></itemizedlist>
</para><para><computeroutput>bool HIGHLIGHT</computeroutput></para><para><itemizedlist>
<listitem><para>Enable/disable syntax highlighting of stack traces. Default value: <computeroutput>TRUE</computeroutput> (requires <computeroutput>code.css</computeroutput> stylesheet).</para></listitem></itemizedlist>
</para><para><computeroutput>string HOST</computeroutput></para><para><itemizedlist>
<listitem><para>Server host name. If `$_SERVER[&apos;SERVER_NAME&apos;]<computeroutput>is not available, return value of</computeroutput>gethostname()` is used.</para></listitem></itemizedlist>
</para><para><computeroutput>string IP</computeroutput></para><para><itemizedlist>
<listitem><para>Remote IP address. The framework derives the address from headers if HTTP client is behind a proxy server.</para></listitem></itemizedlist>
</para><para><computeroutput>array JAR</computeroutput></para><para><itemizedlist>
<listitem><para>Default cookie parameters.</para></listitem></itemizedlist>
</para><para><computeroutput>string LANGUAGE</computeroutput></para><para><itemizedlist>
<listitem><para>Current active language. Value is used to load the appropriate language translation file in the folder pointed to by <computeroutput>LOCALES</computeroutput>. If set to <computeroutput>NULL</computeroutput>, language is auto-detected from the HTTP <computeroutput>Accept-Language</computeroutput> request header.</para></listitem></itemizedlist>
</para><para><computeroutput>string LOCALES</computeroutput></para><para><itemizedlist>
<listitem><para>Location of the language dictionaries.</para></listitem></itemizedlist>
</para><para><computeroutput>string LOGS</computeroutput></para><para><itemizedlist>
<listitem><para>Location of custom logs.</para></listitem></itemizedlist>
</para><para><computeroutput>mixed ONERROR</computeroutput></para><para><itemizedlist>
<listitem><para>Callback function to use as custom error handler.</para></listitem></itemizedlist>
</para><para><computeroutput>string PACKAGE</computeroutput></para><para><itemizedlist>
<listitem><para>Framework name.</para></listitem></itemizedlist>
</para><para><computeroutput>array PARAMS</computeroutput></para><para><itemizedlist>
<listitem><para>Captured values of tokens defined in a <computeroutput>route()</computeroutput> pattern. <computeroutput>PARAMS.0</computeroutput> contains the captured URL relative to the <ref refid="class_web" kindref="compound">Web</ref> root.</para></listitem></itemizedlist>
</para><para><computeroutput>string PATTERN</computeroutput></para><para><itemizedlist>
<listitem><para>Contains the routing pattern that matches the current request URI.</para></listitem></itemizedlist>
</para><para><computeroutput>string PLUGINS</computeroutput></para><para><itemizedlist>
<listitem><para>Location of <ref refid="class_f3" kindref="compound">F3</ref> plugins. Default value is the folder where the framework code resides, i.e. the path to <computeroutput><ref refid="base_8php" kindref="compound">base.php</ref></computeroutput>.</para></listitem></itemizedlist>
</para><para><computeroutput>int PORT</computeroutput></para><para><itemizedlist>
<listitem><para>TCP/IP listening port used by the <ref refid="class_web" kindref="compound">Web</ref> server.</para></listitem></itemizedlist>
</para><para><computeroutput>string PREFIX</computeroutput></para><para><itemizedlist>
<listitem><para>String prepended to language dictionary terms.</para></listitem></itemizedlist>
</para><para><computeroutput>bool QUIET</computeroutput></para><para><itemizedlist>
<listitem><para>Toggle switch for suppressing or enabling standard output and error messages. Particularly useful in unit testing.</para></listitem></itemizedlist>
</para><para><computeroutput>bool RAW</computeroutput></para><para><itemizedlist>
<listitem><para>Disable automatic storage of HTTP request body into <computeroutput>BODY</computeroutput>. Should be TRUE when processing large data coming from <computeroutput>php://input</computeroutput> which will not fit in memory. Default value: <computeroutput>FALSE</computeroutput></para></listitem></itemizedlist>
</para><para><computeroutput>string REALM</computeroutput></para><para><itemizedlist>
<listitem><para>Full canonical URL.</para></listitem></itemizedlist>
</para><para><computeroutput>string RESPONSE</computeroutput></para><para><itemizedlist>
<listitem><para>The body of the last HTTP response. <ref refid="class_f3" kindref="compound">F3</ref> populates this variable regardless of the <computeroutput>QUIET</computeroutput> setting.</para></listitem></itemizedlist>
</para><para><computeroutput>string ROOT</computeroutput></para><para><itemizedlist>
<listitem><para>Absolute path to document root folder.</para></listitem></itemizedlist>
</para><para><computeroutput>array ROUTES</computeroutput></para><para><itemizedlist>
<listitem><para>Contains the defined application routes.</para></listitem></itemizedlist>
</para><para><computeroutput>string SCHEME</computeroutput></para><para><itemizedlist>
<listitem><para>Server protocol, i.e. <computeroutput>http</computeroutput> or <computeroutput>https</computeroutput>.</para></listitem></itemizedlist>
</para><para><computeroutput>string SERIALIZER</computeroutput></para><para><itemizedlist>
<listitem><para>Default serializer. Normally set to <computeroutput>php</computeroutput>, unless PHP <computeroutput>igbinary</computeroutput> extension is auto-detected. Assign <computeroutput>json</computeroutput> if desired.</para></listitem></itemizedlist>
</para><para><computeroutput>string TEMP</computeroutput></para><para><itemizedlist>
<listitem><para>Temporary folder for cache, filesystem locks, compiled <ref refid="class_f3" kindref="compound">F3</ref> templates, etc. Default is the <computeroutput>tmp/</computeroutput> folder inside the <ref refid="class_web" kindref="compound">Web</ref> root. Adjust accordingly to conform to your site&apos;s security policies.</para></listitem></itemizedlist>
</para><para><computeroutput>string TZ</computeroutput></para><para><itemizedlist>
<listitem><para>Default timezone. Changing this value automatically calls the underlying <computeroutput>date_default_timezone_set()</computeroutput> function.</para></listitem></itemizedlist>
</para><para><computeroutput>string UI</computeroutput></para><para><itemizedlist>
<listitem><para>Search path for user interface files used by the <computeroutput><ref refid="class_view" kindref="compound">View</ref></computeroutput> and <computeroutput><ref refid="class_template" kindref="compound">Template</ref></computeroutput> classes&apos; <computeroutput>render()</computeroutput> method. Default value is the <ref refid="class_web" kindref="compound">Web</ref> root. Accepts a pipe (<computeroutput>|</computeroutput>), comma (<computeroutput>,</computeroutput>), or semi-colon (<computeroutput>;</computeroutput>) as separator for multiple paths.</para></listitem></itemizedlist>
</para><para><computeroutput>callback UNLOAD</computeroutput></para><para><itemizedlist>
<listitem><para>Executed by framework on script shutdown.</para></listitem></itemizedlist>
</para><para><computeroutput>string UPLOADS</computeroutput></para><para><itemizedlist>
<listitem><para>Directory where file uploads are saved.</para></listitem></itemizedlist>
</para><para><computeroutput>string URI</computeroutput></para><para><itemizedlist>
<listitem><para>Current HTTP request URI.</para></listitem></itemizedlist>
</para><para><computeroutput>string VERB</computeroutput></para><para><itemizedlist>
<listitem><para>Current HTTP request method.</para></listitem></itemizedlist>
</para><para><computeroutput>string VERSION</computeroutput></para><para><itemizedlist>
<listitem><para>Framework version.</para></listitem></itemizedlist>
</para><para><heading level="3"><ref refid="class_template" kindref="compound">Template</ref> Directives</heading>
</para><para><programlisting><codeline><highlight class="normal">@token</highlight></codeline>
</programlisting><itemizedlist>
<listitem><para>Replace <computeroutput>@token</computeroutput> with value of equivalent <ref refid="class_f3" kindref="compound">F3</ref> variable.</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">{{<sp/>mixed<sp/>expr<sp/>}}</highlight></codeline>
</programlisting><itemizedlist>
<listitem><para>Evaluate. <computeroutput>expr</computeroutput> may include template tokens, constants, operators (unary, arithmetic, ternary and relational), parentheses, data type converters, and functions. If not an attribute of a template directive, result is echoed.</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">{{<sp/>string<sp/>expr<sp/>|<sp/>raw<sp/>}}</highlight></codeline>
</programlisting><itemizedlist>
<listitem><para>Render unescaped <computeroutput>expr</computeroutput>. <ref refid="class_f3" kindref="compound">F3</ref> auto-escapes strings by default.</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">{{<sp/>string<sp/>expr<sp/>|<sp/>esc<sp/>}}</highlight></codeline>
</programlisting><itemizedlist>
<listitem><para>Render escaped <computeroutput>expr</computeroutput>. This is the default framework behavior. The <computeroutput>| esc</computeroutput> suffix is only necessary if <computeroutput>ESCAPE</computeroutput> global variable is set to <computeroutput>FALSE</computeroutput>.</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">{{<sp/>string<sp/>expr,<sp/>arg1,<sp/>...,<sp/>argN<sp/>|<sp/>format<sp/>}}</highlight></codeline>
</programlisting><itemizedlist>
<listitem><para>Render an ICU-formatted <computeroutput>expr</computeroutput> and pass the comma-separated arguments, where <computeroutput>arg1, ..., argn</computeroutput> is one of:- <computeroutput>&apos;date&apos;</computeroutput>, <computeroutput>&apos;time&apos;</computeroutput>, <computeroutput>&apos;number, integer&apos;</computeroutput>, <computeroutput>&apos;number, currency&apos;</computeroutput>, or <computeroutput>&apos;number, percent&apos;</computeroutput>.</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">&lt;include</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/>if=&quot;{{<sp/>bool<sp/>condition<sp/>}}&quot;<sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>href=&quot;{{<sp/>string<sp/>subtemplate<sp/>}}&quot;</highlight></codeline>
<codeline><highlight class="normal">/&gt;</highlight></codeline>
</programlisting><itemizedlist>
<listitem><para>Get contents of <computeroutput>subtemplate</computeroutput> and insert at current position in template if optional condition is <computeroutput>TRUE</computeroutput>.</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">&lt;exclude&gt;text-block&lt;/exclude&gt;</highlight></codeline>
</programlisting><itemizedlist>
<listitem><para>Remove <computeroutput>text-block</computeroutput> at runtime. Used for embedding comments in templates.</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">&lt;ignore&gt;text-block&lt;/ignore&gt;</highlight></codeline>
</programlisting><itemizedlist>
<listitem><para>Display <computeroutput>text-block</computeroutput> as-is, without interpretation/modification by the template engine.</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">&lt;check<sp/>if=&quot;{{<sp/>bool<sp/>condition<sp/>}}&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;true&gt;true-block&lt;/true&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;false&gt;false-block&lt;/false&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/check&gt;</highlight></codeline>
</programlisting><itemizedlist>
<listitem><para>Evaluate condition. If <computeroutput>TRUE</computeroutput>, then <computeroutput>true-block</computeroutput> is rendered. Otherwise, <computeroutput>false-block</computeroutput> is used.</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">&lt;loop</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>from=&quot;{{<sp/>statement<sp/>}}&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>to=&quot;{{<sp/>bool<sp/>expr<sp/>}}&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/>step=&quot;{{<sp/>statement<sp/>}}&quot;<sp/>]&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>text-block</highlight></codeline>
<codeline><highlight class="normal">&lt;/loop&gt;</highlight></codeline>
</programlisting><itemizedlist>
<listitem><para>Evaluate <computeroutput>from</computeroutput> statement once. Check if the expression in the <computeroutput>to</computeroutput> attribute is <computeroutput>TRUE</computeroutput>, render <computeroutput>text-block</computeroutput> and evaluate <computeroutput>step</computeroutput> statement. Repeat iteration until <computeroutput>to</computeroutput> expression is <computeroutput>FALSE</computeroutput>.</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">&lt;repeat</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>group=&quot;{{<sp/>array<sp/>@group|expr<sp/>}}&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/>key=&quot;{{<sp/>scalar<sp/>@key<sp/>}}&quot;<sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>value=&quot;{{<sp/>mixed<sp/>@value<sp/>}}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[<sp/>counter=&quot;{{<sp/>scalar<sp/>@key<sp/>}}&quot;<sp/>]&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>text-block</highlight></codeline>
<codeline><highlight class="normal">&lt;/repeat&gt;</highlight></codeline>
</programlisting><itemizedlist>
<listitem><para>Repeat <computeroutput>text-block</computeroutput> as many times as there are elements in the array variable <computeroutput>@group</computeroutput> or the expression <computeroutput>expr</computeroutput>. <computeroutput>@key</computeroutput> and <computeroutput>@value</computeroutput> function in the same manner as the key-value pair in the equivalent PHP <computeroutput>foreach()</computeroutput> statement. Variable represented by <computeroutput>key</computeroutput> in <computeroutput>counter</computeroutput> attribute increments by <computeroutput>1</computeroutput> with every iteration.</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">&lt;switch<sp/>expr=&quot;{{<sp/>scalar<sp/>expr<sp/>}}&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;case<sp/>value=&quot;{{<sp/>scalar<sp/>@value|expr<sp/>}}&quot;<sp/>break=&quot;{{<sp/>bool<sp/>TRUE|FALSE<sp/>}}&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text-block</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/case&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline><highlight class="normal">&lt;/switch&gt;</highlight></codeline>
</programlisting><itemizedlist>
<listitem><para>Equivalent of the PHP switch-case jump table structure.</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">{*<sp/>text-block<sp/>*}</highlight></codeline>
</programlisting><itemizedlist>
<listitem><para>Alias for <computeroutput>&lt;exclude&gt;</computeroutput>.</para></listitem></itemizedlist>
</para><para><heading level="3">API Documentation</heading>
</para><para>The most up-to-date documentation is located at <ulink url="http://fatfreeframework.com/">http://fatfreeframework.com/</ulink>. It contains examples of usage of the various framework components.</para><para><heading level="2">Support and Licensing</heading>
</para><para>Technical support is available at the official discussion forum: <ulink url="https://groups.google.com/forum/#!forum/f3-framework"><computeroutput>https://groups.google.com/forum/#!forum/f3-framework</computeroutput></ulink>. If you need live support, you can talk to the development team and other members of the <ref refid="class_f3" kindref="compound">F3</ref> community via IRC. We&apos;re on the FreeNode <computeroutput>#fatfree</computeroutput> channel (<computeroutput>chat.freenode.net</computeroutput>). Visit <ulink url="http://webchat.freenode.net/"><computeroutput>http://webchat.freenode.net/</computeroutput></ulink> to join the conversation. You can also download the <ulink url="https://addons.mozilla.org/en-US/firefox/addon/chatzilla/">Firefox Chatzilla</ulink> add-on or <ulink url="http://www.pidgin.im/">Pidgin</ulink> if you don&apos;t have an IRC client so you can participate in the live chat.</para><para><heading level="3">Nightly Builds</heading>
</para><para><ref refid="class_f3" kindref="compound">F3</ref> uses Git for version control. To clone the code repository on GitHub:-</para><para><programlisting><codeline><highlight class="normal">git<sp/>clone<sp/>git://github.com/bcosca/fatfree.git</highlight></codeline>
</programlisting></para><para>If all you want is a zipball, grab it <ulink url="https://github.com/bcosca/fatfree/archive/dev.zip"><bold>here</bold></ulink>.</para><para>To file a bug report, visit <ulink url="https://github.com/bcosca/fatfree/issues"><computeroutput>https://github.com/bcosca/fatfree/issues</computeroutput></ulink>.</para><para><heading level="3">Fair Licensing</heading>
</para><para><bold>Fat-Free Framework is free and released as open source software covered by the terms of the <ulink url="http://www.gnu.org/licenses/gpl-3.0.html">GNU Public License</ulink> (GPL v3).</bold> You may not use the software, documentation, and samples except in compliance with the license. If the terms and conditions of this license are too restrictive for your use, alternative licensing is available for a very reasonable fee.</para><para>If you feel that this software is one great weapon to have in your programming arsenal, it saves you a lot of time and money, use it for commercial gain or in your business organization, please consider making a donation to the project. A significant amount of time, effort, and money has been spent on this project. Your donations help keep this project alive and the development team motivated. Donors and sponsors get priority support (24-hour response time on business days).</para><para><heading level="3">Credits</heading>
</para><para>The Fat-Free Framework is community-driven software. It can&apos;t be what it is today without the help and support from the following people and organizations:</para><para><itemizedlist>
<listitem><para>GitHub</para></listitem><listitem><para>Square Lines, LLC</para></listitem><listitem><para>Mirosystems</para></listitem><listitem><para>Stehlik &amp; Company</para></listitem><listitem><para>Talis Group, Ltd.</para></listitem><listitem><para>Tecnilógica</para></listitem><listitem><para>G Holdings, LLC</para></listitem><listitem><para>S2 Development, Ltd.</para></listitem><listitem><para>Store Machine</para></listitem><listitem><para>PHP Experts, Inc.</para></listitem><listitem><para>Meins und Vogel GmbH</para></listitem><listitem><para>Online Prepaid Services</para></listitem><listitem><para>Christian Knuth</para></listitem><listitem><para>Sascha Ohms</para></listitem><listitem><para>Lars Brandi Jensen</para></listitem><listitem><para>Jermaine Maree</para></listitem><listitem><para>Eyðun Lamhauge</para></listitem><listitem><para>Sergey Zaretsky</para></listitem><listitem><para>Daniel Kloke</para></listitem><listitem><para>Brian Nelson</para></listitem><listitem><para>Roberts Lapins</para></listitem><listitem><para>Boris Gurevich</para></listitem><listitem><para>Jose Maria Garrido Diaz</para></listitem><listitem><para>Dawn Comfort</para></listitem><listitem><para>Johan Viberg</para></listitem><listitem><para>Povilas Musteikis</para></listitem><listitem><para>Andrew Snook</para></listitem><listitem><para>Jafar Amjad</para></listitem><listitem><para>Taylor McCall</para></listitem><listitem><para>Raymond Kirkland</para></listitem><listitem><para>Yuriy Gerassimenko</para></listitem><listitem><para>William Stam</para></listitem><listitem><para>Sam George</para></listitem><listitem><para>Steve Wasiura</para></listitem><listitem><para>Andreas Ljunggren</para></listitem><listitem><para>Sashank Tadepalli</para></listitem><listitem><para>Chad Bishop</para></listitem><listitem><para>Bradley Slavik</para></listitem><listitem><para>Lee Blue</para></listitem><listitem><para>Alexander Shatilo</para></listitem><listitem><para>Justin Noel</para></listitem><listitem><para>Ivan Kovac</para></listitem><listitem><para>Tony&apos;s Internet Solutions</para></listitem><listitem><para>Charles Stigler</para></listitem><listitem><para>Attila van der Velde</para></listitem><listitem><para>Indoblo Commerce Ltd.</para></listitem><listitem><para>Jens Níemeyer</para></listitem><listitem><para>Raghu Veer Dendukuri</para></listitem><listitem><para>NovelLead B.V.</para></listitem><listitem><para>Emir Alp</para></listitem><listitem><para>Dominic Schwarz</para></listitem><listitem><para>Sven Zahrend</para></listitem><listitem><para>LucidStorm</para></listitem><listitem><para>Nevatech</para></listitem><listitem><para>Matt Wielgos</para></listitem><listitem><para>Maximilian Summe</para></listitem><listitem><para>Caspar Frey</para></listitem><listitem><para>FocusHeart</para></listitem><listitem><para>Philip Lawrence</para></listitem><listitem><para>Peter Beverwyk</para></listitem><listitem><para>Judith Grass</para></listitem><listitem><para>Randal Hintz</para></listitem><listitem><para>Franz Josef</para></listitem><listitem><para>Biswajit Nayak</para></listitem><listitem><para>R Mohan</para></listitem><listitem><para>Michael Messner</para></listitem><listitem><para>Florent Racineux</para></listitem><listitem><para>Jason Borseth</para></listitem><listitem><para>Dmitrij Chernov</para></listitem><listitem><para>Marek Toman</para></listitem><listitem><para>Simone Cociancich</para></listitem><listitem><para>Alan Holding</para></listitem><listitem><para>Philipp Hirsch</para></listitem><listitem><para>Aurélien Botermans</para></listitem><listitem><para>Christian Treptow</para></listitem><listitem><para>Кубарев Дмитрий (Dmitry Kubarev)</para></listitem><listitem><para>Alexandru Catalin Trandafir</para></listitem><listitem><para>Leigh Harrison</para></listitem><listitem><para>Дмитриев Иван (Ivan Dmitriev)</para></listitem><listitem><para>IT_GAP</para></listitem><listitem><para>Sergeev Andrey</para></listitem><listitem><para>Steven J Mixon</para></listitem><listitem><para>Roland Fath</para></listitem><listitem><para>Justin Parker</para></listitem><listitem><para>Costas Menico</para></listitem><listitem><para>Mathieu-Philippe Bourgeois</para></listitem><listitem><para>Ryan McKillop</para></listitem><listitem><para>Chris Clarke</para></listitem><listitem><para>Ngan Ting On</para></listitem><listitem><para>Eli Argon</para></listitem><listitem><para>Seregin Andrew</para></listitem><listitem><para>Marek Toman</para></listitem><listitem><para>Diji Enterprises</para></listitem><listitem><para>uonick</para></listitem><listitem><para>Kamil Kiblis</para></listitem><listitem><para>Mars Yau</para></listitem><listitem><para>Martin Latinov</para></listitem><listitem><para>Malikov Evgene</para></listitem><listitem><para>Andres Espinoza Arce</para></listitem><listitem><para>Matthew Williamson</para></listitem><listitem><para>Andrew Brookes</para></listitem><listitem><para>Steve Cove</para></listitem><listitem><para>Steven Witten</para></listitem><listitem><para>Silvan Seeholzer</para></listitem></itemizedlist>
</para><para>Special thanks to the selfless others who expressed their desire to remain anonymous, yet share their time, contribute code, send donations, promote the framework to a wider audience, as well as provide encouragement and regular financial assistance. Their generosity is <ref refid="class_f3" kindref="compound">F3</ref>&apos;s prime motivation.</para><para><ulink url="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=MJSQL8N5LPDAY"></ulink></para><para><image type="html" name="bitcoin.png"></image>
</para><para><heading level="3">Legal notice</heading>
</para><para>By making a donation to this project you signify that you acknowledged, understood, accepted, and agreed to the terms and conditions contained in this notice. Your donation to the Fat-Free Framework project is voluntary and is not a fee for any services, goods, or advantages, and making a donation to the project does not entitle you to any services, goods, or advantages. We have the right to use the money you donate to the Fat-Free Framework project in any lawful way and for any lawful purpose we see fit and we are not obligated to disclose the way and purpose to any party unless required by applicable law. Although Fat-Free Framework is free software, to our best knowledge this project does not have any tax-exempt status. The Fat-Free Framework project is neither a registered non-profit corporation nor a registered charity in any country. Your donation may or may not be tax-deductible; please consult this with your tax advisor. We will not publish/disclose your name and e-mail address without your consent, unless required by applicable law. Your donation is non-refundable.</para><para><bold>Copyright (c) 2009-2014 F3::Factory/Bong Cosca &lt;bong&amp;#46;cosca&amp;#64;yahoo&amp;#46;com&gt;</bold></para><para><ulink url="http://githalytics.com/bcosca/fatfree"></ulink> </para>    </detaileddescription>
  </compounddef>
</doxygen>
